# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: 'zh_CN'
    # This parameter defines the codes of the locales (languages) enabled in the application
    app_locales: zh_CN
    app.notifications.email_sender: anonymous@example.com

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.
        bind:               # defines the scalar arguments once and apply them to any service defined/created in this file
            $debug: '%kernel.debug%'
            $redisDefaultClient : '@snc_redis.default'

#            $defaultLocale: '%locale%'
##            $emailSender: '%app.notifications.email_sender%'

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/**/{AutoGenerated,Model,Migrations,Tests,Kernel.php,HelperFunctions.php}'
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

#    console_logging_formatter:
#        class: Symfony\Bridge\Monolog\Formatter\ConsoleFormatter
#        arguments:
#            - {format: "%%datetime%% %%start_tag%%%%level_name%%%%end_tag%% <comment>[%%channel%%]</> %%message%%\n"}

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Common\Controller\:
        resource: '../src/Common/Controller'
        tags: ['controller.service_arguments']

    App\Admin\Controller\:
        resource: '../src/Admin/Controller'
        tags: ['controller.service_arguments']

    App\Open\Controller\:
        resource: '../src/Open/Controller'
        tags: ['controller.service_arguments']

    App\Reseller\Controller\:
        resource: '../src/Reseller/Controller'
        tags: ['controller.service_arguments']

    App\Common\Service\Cache\ChainCache:
       arguments:
           $adapters: ['@app.cache.apcu', '@app.cache.redis']
#    App\Supplier\Controller\:
#        resource: '../src/Supplier/Controller'
#        tags: ['controller.service_arguments']

#    simple_form.validators.buildins.valid_csrf:
#      class: Lianz\SimpleFormBundle\Validation\Validators\CsrfValidator
#      autowire: true
#
#    Lianz\SimpleFormBundle\Validation\Validators\CsrfValidator:
#      public: true

    App\Common\Service\FileUpload\UploadFileNamer:
        public: true

#    App\Service\ActiveRecordResetter:
#      public: true
#      tags:
#        - { name: 'kernel.reset', method: 'reset' }
#
#    App\EventSubscriber\RequestTerminateSubscriber:
#      tags:
#        - { name: kernel.event_listener, event: kernel.terminate, priority: -99999 }

    web_server.command.server_run:
      class: Symfony\Bundle\WebServerBundle\Command\ServerRunCommand
      arguments:
        - "%kernel.project_dir%/web"
        - "%kernel.environment%"
      tags:
        - { name: console.command, command: server:run }

    web_server.command.server_start:
      class: Symfony\Bundle\WebServerBundle\Command\ServerStartCommand
      arguments:
        - "%kernel.project_dir%/web"
        - "%kernel.environment%"
      tags:
        - { name: console.command, command: server:start }

    App\Common\Bundle\SimplePay\Service\AlipayService:
        class: App\Common\Bundle\SimplePay\Service\AlipayService
        factory: ['\App\Common\Bundle\SimplePay\Factory\PaymentGatewayFactory', create]
        arguments: ['@logger', 'alipay', "%simple_pay%"]

    App\Common\Bundle\SimplePay\Service\WechatService:
        class: App\Common\Bundle\SimplePay\Service\WechatService
        factory: ['\App\Common\Bundle\SimplePay\Factory\PaymentGatewayFactory', create]
        arguments: ['@logger', 'wechat', "%simple_pay%"]

    Symfony\Component\Security\Http\AccessMapInterface: "@security.access_map"


    App\OpenApi\Api\Handler\:
        public: true
        resource: '../src/OpenApi/Api/Handler'
    App\OpenApi\Payment\Handler\:
        public: true
        resource: '../src/OpenApi/Payment/Handler'

    App\Common\Enqueue\Extension\ProcessorExceptionExtension:
        tags:
            - { name: 'enqueue.consumption.extension' }

    App\OpenApi\Worker\:
        resource: '../src/OpenApi/Worker'
        bind:
            $logger : '@monolog.logger.worker'

#    worker_logger_extension:
#        class: 'Enqueue\Consumption\Extension\LoggerExtension'
#        public: false
#        arguments: ['@logger']
#        tags:
#            - { name: 'monolog.logger', channel: 'worker' }
#            - { name: 'enqueue.consumption.extension', priority: 255 }
