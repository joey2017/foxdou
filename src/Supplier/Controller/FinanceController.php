<?php

namespace App\Supplier\Controller;

use App\Common\Model\AutoGenerated\cash_bank;
use App\Common\Model\AutoGenerated\sup_users;
use App\Common\Model\Payment\CashUserAccount;
use App\Common\Model\Payment\SellCashUserLog;
use App\Common\Model\Payment\UserMoneyLog;
use App\Common\Model\Payment\UserMoneyTradeLog;
use App\Common\Model\SystemSettingItem;
use App\Common\Model\User\OperationLog;
use App\Common\Model\User\SupplierAccount;
use App\Common\Model\User\User;
use App\Platform;
use function Symfu\SimpleFormBundle\to_enum;
use Symfony\Component\HttpFoundation\Request;
use App\Constants;
use Symfu\SimpleFormBundle\Form;
use Symfony\Component\Routing\Annotation\Route;

/**
 * @Route(defaults={"group": "finance"})
 */
class FinanceController extends SupplierBaseController {

    /**
     * 账户概览
     * @Route("/finance", name="supplier_finance_index")
     */
    public function indexAction(Request $request) {
        $sup     = new sup_users();
        $account = $sup->first(['user_id' => $this->getUserId(), 'status' => User::STATUS_ACTIVE]);
        return $this->render('Supplier/Finance/index.twig', ['account' => $account]);
    }

    /**
     * 交易记录
     * @Route("/finance/trade-list", name="supplier_finance_trade_list")
     */
    public function tradeListAction(Request $request, Form $form) {
        if ($request->query->count() < 2) {
            return $this->render('Supplier/Finance/trade_list.twig');
        }

        $form->init([
            'export'           => [''],
            'count'            => [''],
            'outer_sn'         => [''],
            'order_id'         => [''],
            'name'             => [''],
            'amount_min'       => ['numeric'],
            'amount_max'       => ['numeric'],
            'trade_status'     => ['integer'],
            'trade_log_type'   => ['integer'],
            'payment_class_id' => ['integer'],
            'start_time'       => ['date'],
            'end_time'         => ['date']
        ]);

        if (!$form->validate($request->query)) {
            return ['status' => false, 'msg' => '数据有误，请重新提交'];
        }

        $where = [
            //'s.sup_user_id'          => $this->getUserId(),
            'mt.other_party_user_id' => $this->getUserId(),
            //'s.official_sn'          => $form->official_sn,
            'mt.outer_sn'            => $form->outer_sn,
            'mt.order_id'            => $form->order_id,
            'mt.name'                => $form->name,
            //'mt.amount'              => ['BETWEEN' => [$form->amount_min, $form->amount_max]],
            'mt.trade_status'        => $form->trade_status,
            'mt.trade_log_type'      => $form->trade_log_type,
            'mt.payment_class_id'    => $form->payment_class_id,
        ];

        $options = [
            'select' => '*',
            'from'   => UserMoneyTradeLog::table_name() . ' AS mt',
            //'joins'  => 'LEFT JOIN ' . OrderRecharge::table_name() . ' AS r on r.order_id=mt.order_id',
            'order'  => 'mt.id DESC',
        ];

        if ($form->amount_min && $form->amount_max && $form->amount_max > $form->amount_min) {
            $where['mt.amount'] = ['BETWEEN' => [$form->amount_min, $form->amount_max]];
        }

        $start_time = strtotime($form->start_time ?? date('Y-m-d'));
        $end_time   = strtotime($form->end_time ?? date('Y-m-d')) + 86399;
        if ($end_time > $start_time) {
            $where['mt.add_time'] = ['BETWEEN' => [$start_time, $end_time]];
        }

        if ($form->count == 'yes') {
            //收入
            $options['select'] = 'count(mt.id) as count,IFNULL(sum(mt.amount),0) as amount';
            $income            = UserMoneyTradeLog::all(array_merge($where, ['mt.amount' => ['>' => 0]]), $options);

            $payment = UserMoneyTradeLog::all(array_merge($where, ['mt.amount' => ['<' => 0]]), $options);;

            return ['status' => true, 'income' => $income[0], 'payment' => $payment[0]];
        }

        list($data, $total) = UserMoneyTradeLog::paginate($where, $options, $form->page, $form->limit);

        return ['status' => true, 'data' => $data, 'total' => $total, 'msg' => '获取成功'];
    }

    /**
     * 资金明细
     * @Route("/finance/detail", name="supplier_finance_detail")
     */
    public function detailAction(Request $request, Form $form) {
        if ($request->query->count() < 2) {
            return $this->render('Supplier/Finance/detail.twig');
        }

        $form->init([
            'export'     => [''],
            'count'      => [''],
            'name'       => [''],
            'trade_id'   => [''],
            'order_id'   => [''],
            'amount_min' => ['numeric'],
            'amount_max' => ['numeric'],
            'log_type'   => ['integer'],
            'start_time' => ['date'],
            'end_time'   => ['date']

        ]);

        if (!$form->validate($request->query)) {
            return ['status' => false, 'msg' => '数据有误，请重新提交'];
        }

        $start_time = strtotime($form->start_time ?? date('Y-m-d'));
        $end_time   = strtotime($form->end_time ?? date('Y-m-d')) + 86399;
        if ($form->amount_max < $form->amount_min) {
            return ['status' => false, 'msg' => '金额范围最大值不能小于最小值'];
        }

        $options = [
            'select' => 'trade_id,order_id,name,log_type,amount,current_balance,add_time',
        ];

        $where = [
            'user_id'     => $this->getUserId(),
            'platform_id' => Platform::SUPPLIER,
            'amount'      => ['BETWEEN' => [$form->amount_min, $form->amount_max]],
            'name'        => $form->name,
            'add_time'    => ['BETWEEN' => [$start_time, $end_time]],
        ];

        if ($form->log_type) {
            $where['log_type'] = $form->log_type;
        }

        // 数据导出
        if ($form->export == 'yes') {
            $data = UserMoneyLog::all($where, $options);

            if (empty($data)) {
                return ['status' => false, 'msg' => '暂无数据'];
            }

            foreach ($data as &$v) {
                $v['log_type'] = UserMoneyLog::getLogTypeText($v['log_type']);
                $v['add_time'] = $v['add_time'] ? date("Y-m-d H:i:s", $v['add_time']) : '';
            }

            /*theCsv::export([
                    'data'=>$data,
                    'header' => ['流水号','业务单号','交易名称','类型','金额','交易后余额','时间'],
                    'name'=>'资金明细'.date("YmdHis").'.csv'
             ]);*/
            exit();
        } elseif ($form->count == 'yes') {
            $opt['select'] = 'count(id) as count,IFNULL(sum(amount),0) as amount';

            //收入;
            $income = UserMoneyLog::all(array_merge($where, ['amount' => ['>' => 0]]), $opt);

            //支出
            $payment = UserMoneyLog::all(array_merge($where, ['amount' => ['<' => 0]]), $opt);

            return ['status' => true, 'income' => $income[0], 'payment' => $payment[0]];
        }
        list($data, $total) = UserMoneyLog::paginate($where, $options, $form->page, $form->limit);

        return ['status' => true, 'data' => $data, 'total' => $total, 'msg' => '获取成功'];
    }

    /**
     * 提现记录
     * @Route("/finance/withdraw", name="supplier_finance_withdraw")
     */
    public function withdrawAction(Request $request, Form $form) {
        if ($request->query->count() < 2) {
            return $this->render('Supplier/Finance/withdraw.twig');
        }

        $form->init([
            'id'           => [''],
            'trade_status' => ['integer'],
            'keyword'      => ['integer'],
            'start_time'   => ['date'],
            'end_time'     => ['date']

        ]);

        if (!$form->validate($request->query)) {
            return ['status' => false, 'msg' => '数据有误，请重新提交'];
        }

        $start_time = strtotime($form->start_time ?? date('Y-m-d'));
        $end_time   = strtotime($form->end_time ?? date('Y-m-d')) + 86399;
        $options    = [
            'select' => 'cu.id,cu.sn,cu.trade_status,cu.get_cash,cu.actual_cash,cu.account_id,cu.info,cu.add_time,cu.finish_time,cu.shouxu_cash,' .
                'ua.account_bank_name,ua.account_num,ua.account_user,cu.edit_time',
            'from'   => SellCashUserLog::table_name() . ' AS cu',
            'joins'  => 'LEFT JOIN `' . CashUserAccount::table_name() . '` AS ua ON ua.id=cu.account_id',
            'order'  => 'cu.id desc',
        ];

        $where = [
            'cu.user_id'      => $this->getUserId(),
            'cu.platform_id'  => Platform::SUPPLIER,
            'cu.trade_status' => $form->trade_status,
            'cu.add_time'     => ['BETWEEN' => [$start_time, $end_time]],
        ];

        if ($form->keyword) {
            $where['cu.id'] = ['LIKE' => '%' . $form->keyword . '%'];
        }

        list($data, $total) = SellCashUserLog::paginate($where, $options, $form->page, $form->limit);

        return ['status' => true, 'data' => $data, 'total' => $total, 'msg' => '获取成功'];
    }

    /**
     * 提现账户列表
     * @Route("/finance/withdraw-account", name="supplier_finance_withdraw_account")
     */
    public function withdrawAccountAction(Request $request, Form $form) {
        if ($request->query->count() < 2) {
            return $this->render('Supplier/Finance/withdraw_account.twig');
        }

        $form->init([
            'trade_status'  => ['integer'],
            'keyword'       => [''],
            'verify_status' => ['integer'],
            'start_time'    => ['date'],
            'end_time'      => ['date'],
            'page'          => ['integer'],
            'limit'         => ['integer'],

        ]);

        if (!$form->validate($request->query)) {
            return ['status' => false, 'msg' => '数据有误，请重新提交'];
        }

        $start_time = strtotime($form->start_time ?? date('Y-m-d'));
        $end_time   = strtotime($form->end_time ?? date('Y-m-d')) + 86399;

        $options = [
            'select' => 'id,add_time,account_place,mobile,account_bank_name,account_num,account_user,shenfenzheng_id,verify_status,info'
        ];

        $where = [
            'user_id'       => $this->getUserId(),
            'verify_status' => $form->verify_status,
            'add_time'      => ['BETWEEN' => [$start_time, $end_time]],
        ];

        if ($form->keyword) {
            $where['cu.id'] = ['LIKE' => '%' . $form->keyword . '%'];
        }

        list($data, $total) = CashUserAccount::paginate($where, $options, $form->page, $form->limit);

        return ['status' => true, 'data' => $data, 'total' => $total, 'msg' => '获取成功'];
    }

    /**
     * 新增提现账户
     * @Route("/finance/add-withdraw-account", name="supplier_finance_add_withdraw_account")
     */
    public function addWithdrawAccountAction(Request $request, Form $form) {
        if ($request->query->count() < 1) {
            // 支持银行列表
            $bank = (new cash_bank())->all(['available_status' => 1]);
            return $this->render('Supplier/Finance/add_withdraw_account.twig', ['bank' => $bank]);
        }
        $form->init([
            'account_bank_id' => ['required,integer'],
            'account_place'   => ['required'],
            'account_user'    => ['required'],
            'account_num'     => ['required,numeric'],
            'shenfenzheng_id' => ['required'],
            'mobile'          => ['required'],
            'info'            => ['']
        ], 'supplier_finance_add_withdraw_account');

        if (!$form->validate($request->query)) {
            return ['status' => false, 'msg' => '数据有误，请重新提交'];
        }

        if (!(new cash_bank())->find($form->account_bank_id)) {
            return ['status' => false, 'msg' => '暂不支持的提现银行'];
        }

        $result = false;
        try {
            $result = CashUserAccount::transaction(function () use ($form, $request) {
                CashUserAccount::create([
                    'user_id'           => $this->getUserId(),
                    'apply_from'        => '供应商平台',
                    'account_bank_type' => '2',
                    'account_bank_name' => $form->name,
                    'account_bank_id'   => $form->account_bank_id,
                    'account_num'       => $form->account_num,
                    'account_user'      => $form->account_user,
                    'account_place'     => $form->account_place,
                    'mobile'            => $form->mobile,
                    'shenfenzheng_id'   => $form->shenfenzheng_id,
                    'info'              => $form->info,
                    'add_time'          => time(),
                    'edit_time'         => time()
                ]);

                // 写入日志
                OperationLog::create([
                    'user_id'     => $this->getUserId(),
                    'log_type'    => OperationLog::OPERATION_CREATE,
                    'platform_id' => Platform::SUPPLIER,
                    'info'        => "创建名称为“{$form->account_user},{$form->account_num},{$form->account_bank_name}”的提现账户",
                    'ip'          => $request->getClientIp(),
                    'add_time'    => time()
                ]);
                return true;
            });
        } catch (\Exception $e) {
            $text = [
                'supplier_id' => $this->getUserId(),
                'stack'       => $e->getTraceAsString(),
                'error'       => $e->getMessage()
            ];
            $this->logger->error(OperationLog::OPERATIONS[OperationLog::OPERATION_CREATE] . '提现账户失败', $text);
        }

        return ['status' => (boolean)$result, 'msg' => OperationLog::OPERATIONS[OperationLog::OPERATION_CREATE] . ($result ? '成功' : '失败')];
    }

    /**
     * 删除提现账户
     * @Route("/finance/del-withdraw-account", name="supplier_finance_del_withdraw_account")
     */
    public function delWithdrawAccountAction(Request $request) {
        $id = $request->request->getInt('id');

        if (!$id) {
            return ['status' => false, 'msg' => '参数有误'];
        }

        $account = CashUserAccount::first(['id' => $id, 'user_id' => $this->getUserId(), 'verify_status' => ['<>' => CashUserAccount::VERIFY_STATUS_SUCCESS]]);

        if (empty($account)) {
            return ['status' => false, 'msg' => '未找到指定的数据'];
        }

        $result = false;
        try {
            $result = CashUserAccount::transaction(function () use ($account, $request) {
                CashUserAccount::delete_by_id($account->id);

                // 写入日志
                OperationLog::create([
                    'user_id'     => $this->getUserId(),
                    'log_type'    => OperationLog::OPERATION_DELETE,
                    'platform_id' => Platform::SUPPLIER,
                    'info'        => "删除名称为“{$account->account_user},{$account->account_num},{$account->account_bank_name}”的提现账户",
                    'ip'          => $request->getClientIp(),
                    'add_time'    => time(),
                ]);
                return true;
            });
        } catch (\Exception $e) {
            $text = [
                'supplier_id' => $this->getUserId(),
                'stack'       => $e->getTraceAsString(),
                'error'       => $e->getMessage()
            ];
            $this->logger->error(OperationLog::OPERATIONS[OperationLog::OPERATION_DELETE] . '提现账户失败', $text);
        }

        return ['status' => (boolean)$result, 'msg' => OperationLog::OPERATIONS[OperationLog::OPERATION_DELETE] . ($result ? '成功' : '失败')];
    }

    /**
     * 申请提现
     * @Route("/finance/add-withdraw", name="supplier_finance_add_withdraw")
     */
    public function addWithdrawAction(Request $request, Form $form) {
        if ($request->query->count() < 1) {
            // 账户余额
            $supplier = (new sup_users())->first(['user_id' => $this->getUserId()]);

            // 提现账户列表
            $account = CashUserAccount::all(['user_id' => $this->getUserId(), 'verify_status' => CashUserAccount::VERIFY_STATUS_SUCCESS]);
            return $this->render('Supplier/Finance/add_withdraw.twig', ['supplier' => $supplier, 'account' => $account]);
        }
        $form->init([
            'sup_users_id' => ['required,integer'],
            'account_id'   => ['required,integer'],
            //'available_cash' => ['required'],
            'get_cash'     => ['required,numeric'],
            //'shouxu_cash'    => ['required'],
            //'actual_cash'    => ['required'],
            'info'         => ['']
        ], 'supplier_finance_add_withdraw');

        if (!$form->validate($request->query)) {
            return ['status' => false, 'msg' => '数据有误，请重新提交'];
        }

        if (!$account = CashUserAccount::find($form->account_id)) {
            return ['status' => false, 'msg' => '提现账户有误'];
        }

        if (SupplierAccount::first(['user_id' => $this->getUserId()])->balance < $form->get_cash) {
            return ['status' => false, 'msg' => '提现账户余额不足'];
        }

        // 是否满足提现要求
        $fields = [
            'withdraw_fee_rate_type',
            'max_withdraw_times_per_day',
            'min_withdraw_amount',
            'max_withdraw_amount',
            'withdraw_fee_rate_percent',
            'withdraw_fee_rate_fixed'
        ];

        $setting = SystemSettingItem::getSettingItemValue($fields, ['section' => 'supplier_platform']);

        // 最大申请次数
        $sql = "SELECT count(*) AS total FROM (SELECT FROM_UNIXTIME(add_time,'%Y-%m-%d') AS days FROM yzb_sell_cash_user_log WHERE FROM_UNIXTIME(add_time,'%Y-%m-%d') = CURDATE()) AS b";

        if ($total = CashUserAccount::query($sql)->fetch()->total > $setting['max_withdraw_times_per_day']) {
            return ['status' => false, 'msg' => '您今天申请提现的次数已经用完了，请明天再来吧'];
        }

        // 计算手续费
        $cal_result = $this->calculateFee($setting, $form->get_cash);

        if (!$cal_result['status']) {
            return $cal_result;
        }

        $result = false;

        try {
            $result = SellCashUserLog::transaction(function () use ($form, $request, $account, $cal_result) {
                SellCashUserLog::create([
                    'user_id'        => $this->getUserId(),
                    'sn'             => '',
                    'platform_id'    => Platform::SUPPLIER,
                    'account_id'     => $form->account_id,
                    'account_name'   => $account->account_user . ',' . $account->account_num . ',' . $account->account_bank_name,
                    'available_cash' => $form->available_cash,
                    'get_cash'       => $form->get_cash,
                    'shouxu_cash'    => $cal_result['data'],
                    'actual_cash'    => $form->get_cash - $cal_result['data'],
                    'num'            => $account->account_count,
                    'info'           => $form->info,
                    'add_time'       => time()
                ]);

                // 扣除可用余额到提现中余额
                $supplier = new sup_users();
                $sql      = ' UPDATE `yzb_sup_users` SET balance = balance - ?,drawing_amount = drawing_amount + ?,edit_time = ? WHERE user_id = ? AND id = ?';

                $supplier->query($sql, [$form->get_cash, $form->get_cash, time(), $this->getUserId(), $form->sup_users_id]);

                // 写入日志
                OperationLog::create([
                    'user_id'     => $this->getUserId(),
                    'log_type'    => OperationLog::OPERATION_WITHDRAW,
                    'platform_id' => Platform::SUPPLIER,
                    'info'        => "申请提现金额{$form->get_cash}元到账户“{$form->account_user},{$form->account_num},{$form->account_bank_name}”，实际到账" . $form->get_cash - $cal_result['data'] . "元，手续费{$cal_result['data']}元",
                    'ip'          => $request->getClientIp(),
                    'add_time'    => time(),
                ]);
                return true;
            });
        } catch (\Exception $e) {
            $text = [
                'supplier_id' => $this->getUserId(),
                'stack'       => $e->getTraceAsString(),
                'error'       => $e->getMessage()
            ];
            $this->logger->error('申请提现失败', $text);
        }

        return ['status' => (boolean)$result, 'msg' => '提交' . ($result ? '成功' : '失败')];
    }

    /**
     * 申请提现手续费
     * @Route("/finance/get-widthdraw-fee", name="supplier_finance_get_withdraw_fee")
     */
    public function getWidthdrawFeeAction(Request $request) {
        $widthdraw = $request->request->get('widthdraw', 0);
        if (empty($widthdraw)) {
            return ['status' => false, 'msg' => '提现金额有误'];
        }

        if (SupplierAccount::first(['user_id' => $this->getUserId()])->balance < $widthdraw) {
            return ['status' => false, 'msg' => '提现账户余额不足'];
        }

        // 是否满足提现要求
        $fields = [
            'withdraw_fee_rate_type',
            'max_withdraw_times_per_day',
            'min_withdraw_amount',
            'max_withdraw_amount',
            'withdraw_fee_rate_percent',
            'withdraw_fee_rate_fixed'
        ];

        $setting = SystemSettingItem::getSettingItemValue($fields, ['section' => 'supplier_platform']);

        return $this->calculateFee($setting, $widthdraw);
    }

    protected function calculateFee(array $setting, $widthdraw) {
        // 单次可提现范围
        if ($widthdraw < $setting['min_withdraw_amount']) {
            return ['status' => false, 'msg' => '单次提现金额太小'];
        }

        if ($widthdraw > $setting['max_withdraw_amount']) {
            return ['status' => false, 'msg' => '单次提现金额超出最大限度'];
        }

        $fee = 0;
        // 提现手续费
        if ($setting['withdraw_fee_rate_type'] == 1) {//按费率收取
            $fee = $widthdraw * $setting['withdraw_fee_rate_percent'];
        } else {
            if ($setting['withdraw_fee_rate_type'] == 2) {//按单笔固定金额
                $fee = $setting['withdraw_fee_rate_fixed'];
            }
        }

        return ['status' => true, 'data' => $fee];
    }

}
