<?php
namespace App\Passport\Controller;

use App\Common\Model\AutoGenerated\system_settings;
use App\Common\Model\OpenPlatform\App;
use App\Common\Model\User\OpenPlatformAccount;
use App\Common\Model\User\User;
use App\Common\Model\User\UserActivationCode;
use App\Common\Model\User\UserIdentity;
use App\Common\Model\User\UsersOpenAccountLog;
use App\Common\Service\ExternalService\IdentityVerifyService;
use App\Common\Service\SystemSetting;
use App\Common\Service\UserManager;
use App\Common\Service\VerifyService;
use App\Common\Utils\BusinessLicenseChecker;
use App\Common\Utils\MobileNumberChecker;
use App\Platform;
use Symfu\SimpleFormBundle\Form;
use function Symfu\SimpleFormBundle\to_enum;
use Ramsey\Uuid\Uuid;
use Symfony\Component\HttpFoundation\Cookie;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Session\SessionInterface;
use Symfony\Component\HttpKernel\Exception\ServiceUnavailableHttpException;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\Routing\Generator\UrlGenerator;
use Symfony\Component\Routing\Generator\UrlGeneratorInterface;
use Symfu\SimpleValidation\ValidationError;

class RegisterController extends PassportBaseController {

    /**
     * @Route("/register", name="passport_register")
     */
    public function registerAction(Request $request) {
        $response = $this->render('/Passport/Register/register.twig');

        if ($referrer = $request->query->get('r')) {
            $response->headers->setCookie(new Cookie('referrer_id', $referrer, time() + 30 * 86400));
        }

        $returnUrl = $request->query->get('return_url');
        $response->headers->setCookie(new Cookie('register_return_url', $returnUrl, time() + 30 * 86400));

        return $response;
    }

    /**
     * @Route("/register/check-email", name="passport_register_check_reg_email")
     */
    public function checkEmailAction(Request $request, Form $form) {
        $form->init(['email' => ['required, email']], null, false);
        if (!$form->validate($request->query)) {
            return ['status' => false, 'msg' => '邮箱格式不正确', 'errors' => $form->getErrors()];
        }

        $exists = User::exists(['email' => $form->email]);

        return ['status' => !$exists];
    }

    /**
     * @Route("/register/check-mobile", name="passport_register_check_reg_mobile")
     */
    public function checkMobileAction(Request $request) {
        $mobile = $request->request->get('mobile');
        if (!$mobile || !MobileNumberChecker::isValidNumber($mobile)) {
            return ['status' => false, 'msg' => '号码格式不正确'];
        }

        $exists = User::exists(['mobile' => $mobile]);

        return ['status' => !$exists];
    }

    /**
     * @Route("/activation/failure", name="passport_register_activation_failure", methods={"GET"})
     */
    public function failureAction(Request $request) {
        $targetUrl = $request->get('target_url', $this->generateUrl('passport_login', [], UrlGenerator::NETWORK_PATH));
        return $this->render('/Passport/Register/emailActivationFailed.twig', ['target_url' => $targetUrl]);
    }

    /**
     * @Route("/activation/success", name="passport_register_activation_success", methods={"GET"})
     */
    public function successAction(Request $request) {
        // return $this->render('/Passport/Register/activateSuccess.twig', ['result' => 'not_found']);
        $targetUrl = $request->get('target_url', $this->generateUrl('passport_login', [], UrlGenerator::NETWORK_PATH));
        return $this->render('/Passport/Register/emailActivationSuccess.twig', ['target_url' => $targetUrl]);
    }

    /**
     * @Route("/activation/code/{id}", name="passport_register_email_activation", methods={"GET"})
     */
    public function emailActivationAction(Request $request, $id) {
        $activateCode = UserActivationCode::find($id);
        if (!$activateCode) {
            return $this->redirectToRoute('passport_register_activation_failure');
        }

        try {
            $targetUrl       = $request->get('target_url', $this->generateUrl('passport_login', [], UrlGenerator::NETWORK_PATH));
            $targetUrlParams = $targetUrl ? ['target_url' => $targetUrl] : [];

            // 先做这个判断，因为这个判断无需加载用户，避免不必要的数据库查询
            if ($activateCode->isExpired()) {
                $activateCode->delete();
                return $this->render('/Passport/Register/emailActivationPending.twig', ['message' => '您的激活链接已经过期了，如果您账号还需要激活，请点下面的按钮重新发送激活邮件']);
            }

            $user = User::find($activateCode->user_id);
            if (!$user) {
                $activateCode->delete();
                return $this->redirectToRoute('passport_register_activation_failure', $targetUrlParams);
            }

            // 验证过的直接重定向到 target_url
            if ($user->email_verified) {
                $activateCode->delete();
                return $this->redirect($targetUrl);
            }

            User::transaction(function () use ($activateCode, $user) {
                $activateCode->delete();

                $user->email_verified = true;
                $user->save();
                return true;
            });

            return $this->render('/Passport/Register/emailValidationSuccess.twig', $targetUrlParams);
        } catch (\Exception $e) {
            $this->logger->error('激活用户失败', ['activation_code' => $id, 'error' => $e->getMessage(), 'stack' => $e->getTraceAsString()]);
            throw new ServiceUnavailableHttpException('失败');
        }
    }

    /**
     * @Route("/activation/email-activation", name="passport_register_email_activation_result")
     */
    public function emailActivationResultAction(Request $request) {
        $user = $this->getUser();
        if ($user->email_verified) {
            $targetUrl       = $request->get('target_url', $this->generateUrl('passport_login', [], UrlGenerator::NETWORK_PATH));
            $targetUrlParams = $targetUrl ? ['target_url' => $targetUrl] : [];
            return $this->render('/Passport/Register/emailActivationSuccess.twig', $targetUrlParams);
        } else {
            $maskedEmail = $user->getEmail(true);
            return $this->render('/Passport/Register/emailActivationPending.twig', ['message' => "您的账号 {$maskedEmail} 已经注册成功，但是尚未验证邮箱地址，请先验证邮箱后再登录。或者您也可以请求重新发送验证邮件。"]);
        }
    }

    /**
     * @Route("/activation/resend-activation-email", name="passport_register_resend_activation_email", methods={"POST"})
     */
    public function resendActivationEmailAction(Request $request, Form $form, UserManager $userManager, VerifyService $verifyService) {
        $form->init([
            'old_email' => ['email'],
            'new_email' => ['email'],
            'password'  => [''],
        ], 'resend_activation_email');

        if (!$form->validate($request->request)) {
            return ['status' => false, 'error' => '表单验证失败，请刷新页面后重新提交', 'errors' => $form->getErrors()];
        }

        $user = $this->getUser();

        // 如果用户选择输入新邮箱，那么新旧邮箱不能相同，并且密码必须正确
        if ($form->old_email) {
            if ($form->old_email !== $user->email) {
                return ['status' => false, 'error' => '旧邮箱地址不正确', 'errors' => ['old_email' => '旧邮箱地址不正确']];
            }
            if ($form->old_email === $form->new_email) {
                return ['status' => false, 'error' => '新邮箱不能和旧邮箱相同', 'errors' => ['new_email' => '新邮箱不能和旧邮箱相同']];
            }
            if (!$form->password) {
                return ['status' => false, 'error' => '请输入现有密码', 'errors' => ['password' => '请输入现有密码']];
            }
            if (User::exists(['email' => $form->new_email])) {
                return ['status' => false, 'error' => '您输入的新邮箱已经被注册', 'errors' => ['new_email' => "您输入的新邮箱已经被注册"]];
            }

            list($succeed, $message) = $userManager->verifyPassword($user, $form->password);
            if (!$succeed) {
                return ['status' => false, 'error' => $message, 'errors' => ['password' => new ValidationError($message)]];
            }

            $user->email = $form->new_email;
        }

        $context = ['user_id' => $user->id, 'old_email' => $form->old_email, 'new_email' => $form->new_email];

        try {
            User::transaction(function () use ($user, $request, $verifyService) {
                $user->email_verified = false;
                $user->save();

                // 删掉旧的激活链接，重新生成激活链接
                UserActivationCode::delete_all(['user_id' => $user->id]);
                $attrs        = ['id' => Uuid::uuid4(), 'user_id' => $user->id, 'expires_at' => time() + 86400 * 7]; // 有效期 7 天
                $activateCode = UserActivationCode::create($attrs);

                $targetUrl = $request->cookies->get('target_url') ?: $this->generateUrl('passport_login', [], UrlGeneratorInterface::ABSOLUTE_URL);

                $succeed = $verifyService->sendActivationEmail($user, $activateCode->id, $targetUrl);

                return $succeed;
            });

            return ['status' => true, 'message' => '激活邮件已经发送，请及时登录您的邮箱，如果收件箱里找不到的话，可以看看垃圾箱哦！'];
        } catch (\Exception $e) {
            $this->logger->error('重新发送激活邮件失败', array_merge($context, ['error' => $e->getMessage(), 'stack' => $e->getTraceAsString()]));
            return ['status' => true, 'error' => '重新发送激活邮件失败，请重试'];
        }
    }

    /**
     * @Route("/register/check/{type}", name="passport_register_check")
     */
    public function checkAction(Request $request, $type, SessionInterface $session, SystemSetting $settings, IdentityVerifyService $identityVerifyService, Form $form) {
        $agree = $request->request->get('agree');

        if (!$agree === 'yes') {
            return ['status' => false, 'msg' => '请先阅读并同意服务条款'];
        }

        if ($type === User::TYPE_INDIVIDUAL) {
            $form->init([
                'mobile'      => ['required, regex[/^1\d{10}$/]'],
                // 'recaptcha'   => ['required'],
                // 'verify_code' => ['required'],
                'recaptcha'   => ['required, recaptcha'],
                'verify_code' => ['required, verify_code'],
            ], null, false);

            if (!$form->validate($request->request)) {
                return ['status' => false, 'msg' => '表单填写错误，请检查后重新提交', 'errors' => $form->getErrors()];
            }

            if (UserIdentity::exists(['entity_type' => User::TYPE_INDIVIDUAL, 'biz_legal_representative_id_no' => $form->id_num])) {
                return ['status' => false, 'msg' => '您的身份证已被其他账户注册'];
            }

            if ($settings->passport->individual_identity_verify_method === '1') {
                //将身份证信息提交到实名认证接口核实真实性
                list($valid, $msg) = $identityVerifyService->verifyIdentity($form->id_num, $form->real_name);
                if (!$valid) {
                    return ['status' => false, 'msg' => '身份证验证不通过，请重新填写'];
                } else {
                    $session->set('user_register:identity_verify_status', UserIdentity::STATUS_VERIFIED);
                }
            }

            // $session->set('user_register:step1', $);
            return ['status' => true];
        } else {
            $form->init([
                'business_name'       => ['required'],
                'papers'              => ['required, enum[1|2]'],
                'business_license_no' => ['required, regex[/^\d{18}$/]'],
                'mobile'              => ['required, regex[/^1\d{10}$/]'],
            ], null, false);

            if (!$form->validate($request->request)) {
                return ['status' => false, 'msg' => '表单填写错误，请检查后重新提交'];
            }

            return ['status' => true];
        }
    }

    /**
     * @Route("/register/individual", name="passport_register_individual")
     */
    public function individualAction(Request $request, SessionInterface $session, SystemSetting $settings, IdentityVerifyService $identityVerifyService, Form $form) {
        if ($request->getMethod() === Request::METHOD_GET) {
            $returnUrl = $request->cookies->get('register_return_url') ?: $this->generateUrl('passport_login', [], UrlGenerator::ABSOLUTE_URL);
            return $this->render('/Passport/Register/registerIndividual.twig', ['return_url' => $returnUrl]);
        }

        $identityRequired = (bool)$settings->passport->individual_requires_identity;

        $fields = [
            'mobile'      => ['required, mobile'],
            'recaptcha'   => ['required, recaptcha'],
            'verify_code' => ['required, verify_code'],
            'password'    => ['required, min_length[6], max_length[20]'],
            // 'password_confirm'     => ['required, min_length[6], max_length[20], matches[password]'],
        ];
        if ($identityRequired) {
            $fields['real_name'] = ['required'];
            $fields['id_num']    = ['required, id_card'];
        }
        $form->init($fields, 'user_register');

        if (!$form->validate($request->request)) {
            return ['status' => false, 'msg' => '表单填写错误，请检查后重新提交', 'errors' => $form->getErrors()];
        }

        $userStatus     = User::STATUS_ACTIVE;
        $realNameStatus = UserIdentity::STATUS_NEW;
        if ($identityRequired) {
            if (UserIdentity::exists(['entity_type' => User::TYPE_INDIVIDUAL, 'biz_legal_representative_id_no' => $form->id_num])) {
                return ['status' => false, 'msg' => '您的身份证已被其他账户注册'];
            }

            $userStatus     = User::STATUS_REVIEWING;
            $realNameStatus = UserIdentity::STATUS_PENDING;

            if ($settings->passport->individual_identity_verify_method == '1') {
                list($valid, $msg) = $identityVerifyService->verifyIdentity($form->id_num, $form->real_name);
                if ($valid) {
                    $userStatus     = User::STATUS_ACTIVE;
                    $realNameStatus = UserIdentity::STATUS_VERIFIED;
                }
            }
        }

        try {
            User::transaction(function () use ($form, $userStatus, $realNameStatus, $request) {
                $user = $this->createUser(User::TYPE_INDIVIDUAL, $form, $userStatus, $realNameStatus, $request);
                if ($form->id_num) {
                    $now      = date('Y-m-d H:i:s');
                    $verified = $userStatus === UserIdentity::STATUS_VERIFIED;
                    UserIdentity::create([
                        'user_id'           => $user->id,
                        'entity_type'       => $user->type, // '用户类型：I=>个人,B=>企业',
                        'entity_name'       => $form->real_name,
                        'entity_license_no' => $form->id_num, // '身份证号码',
                        'status'            => $realNameStatus, // '实名认证状态,请在代码中控制与user表中的real_name_status保持值一致',
                        'submission_ip'     => $request->getClientIp(),
                        'created_at'        => $now, // '添加时间',
                        'submitted_at'      => $now, // '提交实名认证时间',
                        'full_reviewed_at'  => $verified ? $now : null, // '完成实名认证时间',
                        'basic_reviewed_at' => $verified ? $now : null, // '基本信息审核完成时间',
                    ]);
                }

                //=============2019.2.13注册成功后默认开通开放平台账户和手机话费充值应用=============//
                OpenPlatformAccount::create([
                    'user_id'  => $user->id,
                    'status'   => OpenPlatformAccount::STATUS_ACTIVE,
                    'add_time' => time()
                ]);

                //平台账户开通记录
                UsersOpenAccountLog::create([
                    'user_id'     => $user->id,
                    'pass'        => $user->mobile,
                    //'account' => '',
                    'method'      => UsersOpenAccountLog::METHODS_ADMIN_OPERATION,
                    'platform_id' => Platform::OPEN_PLATFORM,
                    'status'      => UsersOpenAccountLog::STATUS_SUCCESS,
                    'add_time'    => time(),
                ]);

                App::create([
                    'app_secret' => App::generateAppKey(),
                    'service_id' => '2',//手机话费充值
                    'user_id'    => $user->id,
                    'name'       => '手机话费充值',
                    'status'     => '1',
                    'free'       => '1',
                    'pay_type'   => App::PAY_TYPE_REAL_TIME_DEDUCTION,
                    'add_time'   => time(),
                ]);

                //更新开放平台账号开通状态,狐豆身份信息写入状态
                User::update_all([
                    'is_open_platform'       => User::OPENPLATFORM_STATUS_YES,
                    'is_entry_identity_info' => User::IDENTITY_STATUS_YES,
                    'edit_time'              => time()
                ], ['id' => $user->id]);

                //=============2019.2.13注册成功后默认开通开放平台账户和手机充值应用=============//
                return true;
            });

            $activated = $userStatus === User::STATUS_ACTIVE;

            $content = '恭喜你，注册成功！您可以用您的手机号码登录哦！';
            if ($activated) {
                $content = '注册成功！您的身份信息目前正在审核中，审核通过后即可登录。';
            }

            return ['status' => true, 'content' => $content, 'activated' => $activated];
        } catch (\Exception $e) {
            $this->logger->error('用户注册失败', ['mobile' => $form->mobile, 'error' => $e->getMessage(), 'stack' => $e->getTraceAsString()]);
            return ['status' => false, 'content' => '注册失败，请重新提交信息'];
        }
    }

    /**
     * @Route("/register/business", name="passport_register_business")
     */
    public function businessAction(Request $request, SystemSetting $settings, IdentityVerifyService $identityVerifyService, \Swift_Mailer $mailer, Form $form) {
        if ($request->getMethod() === Request::METHOD_GET) {
            $returnUrl = $request->cookies->get('register_return_url') ?: $this->generateUrl('passport_login', [], UrlGenerator::ABSOLUTE_URL);
            return $this->render('/Passport/Register/registerBusiness.twig', ['return_url' => $returnUrl]);
        }

        $businessTypesEnum = to_enum(User::BUSINESS_TYPES);
        $fields            = [
            'business_type'       => ["required, {$businessTypesEnum}"],
            'business_name'       => ['required'],
            'business_license_no' => ['required'],
            'legal_person_name'   => ['required'],
            'legal_person_id_num' => ['required, id_card'],
            'business_address'    => ['required'],
            'password'            => ['required'],
            'mobile'              => ['required, mobile'],
            'email'               => ['required, email'],
            'province_code'       => ['required'],
            'city_code'           => ['required'],
            'district_code'       => ['required'],
            // 'recaptcha'           => ['required'],
            // 'verify_code'         => ['required'],
            'recaptcha'           => ['required, recaptcha'],
            'verify_code'         => ['required, verify_code'],
        ];

        $form->init($fields, 'user_register');

        if (!$form->validate($request->request)) {
            return ['status' => false, 'msg' => '表单填写错误，请检查后重新提交', 'errors' => $form->getErrors()];
        }

        if (!BusinessLicenseChecker::isValid($form->business_license_no)) {
            return ['status' => false, 'msg' => '营业执照号码格式错误', 'errors' => ['business_license_no' => '营业执照号码格式错误']];
        }

        if (User::exists(['email' => $form->email])) {
            return ['status' => false, 'msg' => '您的邮箱已经注册过', 'errors' => ['email' => "您的邮箱已经注册过"]];
        }
        if (User::exists(['mobile' => $form->mobile])) {
            return ['status' => false, 'msg' => '您的手机号已经注册过', 'errors' => ['mobile' => "您的手机号已经注册过"]];
        }

        if (UserIdentity::exists(['entity_type' => User::TYPE_BUSINESS, 'entity_license_no' => $form->legal_person_id_num])) {
            return ['status' => false, 'msg' => '您的身份证已经注册过', 'errors' => ['legal_person_id_num' => '您的身份证已经注册过']];
        }
        if (UserIdentity::exists(['entity_type' => User::TYPE_BUSINESS, 'biz_legal_representative_id_no' => $form->business_license_no])) {
            return ['status' => false, 'msg' => '您的营业执照已经注册过', 'errors' => ['business_license_no' => '您的营业执照已经注册过']];
        }

        //================2019.2.14修改===================//
        $userStatus     = User::STATUS_ACTIVE;
        $realNameStatus = UserIdentity::STATUS_NEW;
        //================2019.2.14修改==================//
        //$userStatus     = User::STATUS_REVIEWING;
        //$realNameStatus = UserIdentity::STATUS_PENDING;

        if ($settings->passport->business_identity_verify_method == '1') {
            list($valid, $msg) = $identityVerifyService->verifyIdentity($form->legal_person_id_num, $form->legal_person_name);
            if ($valid) {
                $userStatus     = User::STATUS_ACTIVE;
                $realNameStatus = UserIdentity::STATUS_VERIFIED;
            }
        }

        try {
            User::transaction(function () use ($form, $userStatus, $realNameStatus, $request, $mailer) {
                $user = $this->createUser(User::TYPE_BUSINESS, $form, $userStatus, $realNameStatus, $request);

                $now      = date('Y-m-d H:i:s');
                $verified = $userStatus === UserIdentity::STATUS_VERIFIED;
                UserIdentity::create([
                    'user_id'                        => $user->id,
                    'entity_type'                    => $user->type, // '用户类型：I=>个人,B=>个体,E=>企业',
                    'entity_name'                    => $form->legal_person_name, // '法人姓名',
                    'biz_legal_representative_id_no' => $form->legal_person_id_num, // '法人身份证号码',
                    'biz_legal_representative_name'  => $form->business_name, // '营业名称（企业名称）和个人姓名',
                    'entity_license_address'         => $form->business_address, // '营业地址',
                    'entity_license_no'              => $form->business_license_no, // '营业执照证件号码或身份证号码',
                    'status'                         => $realNameStatus, // '实名认证状态,请在代码中控制与user表中的real_name_status保持值一致',
                    'submission_ip'                  => $request->getClientIp(),
                    'created_at'                     => $now, // '添加时间',
                    'submitted_at'                   => $now, // '提交实名认证时间',
                    'full_reviewed_at'               => $verified ? $now : null, // '完成实名认证时间',
                    'basic_reviewed_at'              => $verified ? $now : null, // '基本信息审核完成时间',
                    'province_code'                  => $form->province_code,
                    'city_code'                      => $form->city_code,
                    'district_code'                  => $form->district_code,
                ]);

                $attrs        = ['id' => Uuid::uuid4(), 'user_id' => $user->id, 'expires_at' => time() + 86400 * 7]; // 有效期 7 天
                $activateCode = UserActivationCode::create($attrs);

                $this->sendActivationEmail($mailer, $user, $activateCode, $request);

                //=============2019.2.13注册成功后默认开通开放平台账户和手机话费充值应用=============//
                OpenPlatformAccount::create([
                    'user_id'  => $user->id,
                    'status'   => OpenPlatformAccount::STATUS_ACTIVE,
                    'add_time' => time()
                ]);

                //平台账户开通记录
                UsersOpenAccountLog::create([
                    'user_id'     => $user->id,
                    'pass'        => $user->email,
                    //'account' => '',
                    'method'      => UsersOpenAccountLog::METHODS_ADMIN_OPERATION,
                    'platform_id' => Platform::OPEN_PLATFORM,
                    'status'      => UsersOpenAccountLog::STATUS_SUCCESS,
                    'add_time'    => time(),
                ]);

                App::create([
                    'app_secret' => App::generateAppKey(),
                    'service_id' => '2',//手机话费充值
                    'user_id'    => $user->id,
                    'name'       => '手机话费充值',
                    'status'     => '1',
                    'free'       => '1',
                    'pay_type'   => App::PAY_TYPE_REAL_TIME_DEDUCTION,
                    'add_time'   => time(),
                ]);

                //更新开放平台账号开通状态,狐豆身份信息写入状态
                User::update_all([
                    'is_open_platform'       => User::OPENPLATFORM_STATUS_YES,
                    'is_entry_identity_info' => User::IDENTITY_STATUS_YES,
                    'edit_time'              => time()
                ], ['id' => $user->id]);

                //=============2019.2.13注册成功后默认开通开放平台账户和手机充值应用=============//

                return true;
            });

            $activated = $userStatus === User::STATUS_ACTIVE;

            $content = '恭喜你，注册成功！您可以用您的手机号码登录哦！';
            if (!$activated) {
                $content = '注册成功！您的身份信息目前正在审核中，审核通过后即可登录。';
            }

            return ['status' => true, 'content' => $content, 'activated' => $activated];
        } catch (\Exception $e) {
            $this->logger->error('用户注册失败', ['mobile' => $form->mobile, 'error' => $e->getMessage(), 'stack' => $e->getTraceAsString()]);
            return ['status' => false, 'msg' => '注册失败，请重新提交信息'];
        }
    }

    /**
     * @param         $type
     * @param         $form
     * @param         $userStatus
     * @param         $realNameStatus
     * @param Request $request
     * @return User
     * @throws \SimpleRecord\Exception\ModelException
     * @throws \SimpleRecord\Exception\SimpleRecordException
     */
    private function createUser($type, $form, $userStatus, $realNameStatus, Request $request): User {
        $user            = new User();
        $user->type      = $type;
        $user->user_name = $form->mobile;
        $user->nick_name = $form->mobile;
        $user->roles     = User::ROLE_OPEN_PLATFORM;//临时使用
        //$user->roles                  = User::ROLE_USER;
        $user->avatar_url             = '/img/default-head-portrait2.jpg';
        $user->mobile                 = $form->mobile ?: null;
        $user->bind_mobile            = $form->mobile ?: null;
        if ($type == User::TYPE_BUSINESS) {
            $user->email              = $form->email ?? null;
            $user->bind_email         = $form->email ?? null;
        }
        $user->pay_status             = User::PAY_STATUS_ENABLED;
        $user->is_deleted             = false;
        $user->password_error_num     = 0;
        $user->pay_password_error_num = 0;
        $user->balance                = 0;
        $user->register_ip            = $request->getClientIp();
        $user->last_login_ip          = null;
        $user->last_login_time        = null;
        $user->info                   = '';
        $user->other_user_data        = '';
        $user->opened_platform        = '';
        $user->add_time               = time();
        $user->edit_time              = null;
        $user->referrer_id            = $request->cookies->getInt('referrer_id') ?: null;
        $user->status                 = $userStatus;
        $user->real_name_status       = $realNameStatus;

        $user->set_password($form->password);

        $user->save(true, true);

        return $user;
    }

    private function sendActivationEmail(\Swift_Mailer $mailer, User $user, $activateCode, Request $request) {
        $targetUrl   = $request->cookies->get('target_url') ?: $this->generateUrl('passport_login', [], UrlGenerator::ABSOLUTE_URL);
        $activateUrl = $this->generateUrl('passport_register_email_activation', ['id' => $activateCode->id, 'target_url' => $targetUrl], UrlGenerator::ABSOLUTE_URL);

        $data          = ['activate_url' => $activateUrl,];
        $htmlContents  = $this->renderView('/Passport/EmailTemplates/registration_confirm_email.html.twig', $data);
        $plainContents = $this->renderView('/Passport/EmailTemplates/registration_confirm_email.text.twig', $data);

        $message = (new \Swift_Message())
            ->setTo($user->email)
            ->setFrom('safe@foxdou.com')
            ->setSubject('请激活您的狐豆账号 — 狐豆科技')
            ->setBody($htmlContents, 'text/html')
            ->addPart($plainContents, 'text/plain');

        // $transport = $mailer->getTransport();
        // if($transport instanceof \Swift_Transport_EsmtpTransport){
        //     $transport->setStreamOptions([ 'ssl' => ['allow_self_signed' => true, 'verify_peer' => false, 'verify_peer_name' => false]]);
        // }

        $mailer->send($message);
    }
}
