<?php

namespace App\Passport\Controller;

use App\Common\Model\AutoGenerated\user_safe_question;
use App\Common\Model\User\OperationLog;
use App\Common\Model\User\RealNameAuthenticationInfo;
use App\Common\Model\User\User;
use App\Common\Service\RecaptchaService;
use App\Passport\Model\Operation;
use App\Passport\Model\SafeCenter;
use App\Passport\Service\EmailMsgNoticeService;
use App\Passport\Service\MobileMsgNoticeService;
use App\Passport\Service\UserPassword;
use App\Passport\Service\UserPasswordService;
use App\Platform;
use function App\string_hidden;
use Psr\Log\LoggerInterface;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\Routing\Annotation\Route;

class SafeCenterController extends PassportBaseController {

    private $emailMsgNoticeService;
    private $mobileMsgNoticeService;
    private $userPasswordService;

    public function __construct(LoggerInterface $logger, EmailMsgNoticeService $emailMsgNoticeService, MobileMsgNoticeService $mobileMsgNoticeService, UserPasswordService $userPasswordService) {
        parent::__construct($logger);
        $this->emailMsgNoticeService  = $emailMsgNoticeService;
        $this->mobileMsgNoticeService = $mobileMsgNoticeService;
        $this->userPasswordService    = $userPasswordService;
    }

    /**
     * 检测手机重复
     * @Route("/safe-center/mobile-status", name="passport_safe_center_mobile_status")
     */
    public function mobileStatusAction(Request $request) {
        if ($result = User::first(['mobile' => $request->get('val')])) {
            return ['status' => false, 'msg' => '该手机已被其他账户用作登陆账号'];
        }
        return ['status' => true];
    }

    /**
     * 检测邮箱重复
     * @Route("/safe-center/email-status", name="passport_safe_center_email_status")
     */
    public function emailStatusAction(Request $request) {
        if ($result = User::first(['email' => $request->get('val')])) {
            return ['status' => false, 'msg' => '该邮箱已被其他账户用作登陆账号'];
        }
        return ['status' => true];
    }

    /**
     * 安全检测
     */
    private function safeInspect(Request $request) {
        $type    = $request->get('type');
        $session = $request->getSession()->get('SafeInspect');

        if (empty($session)) {//没进入SafeInspect步骤
            return ['status' => false, 'msg' => '为了您的账户安全，请按步骤重新操作'];
        }
        if ($session['time'] < time() - 600) {//超过10分钟
            return ['status' => false, 'msg' => '操作超时,请重新操作'];
        }
        if ($type != $session['type']) {
            $request->getSession()->remove('SafeInspect');
            return ['status' => false, 'msg' => '您的操作有误'];
        }
        if ($session['need_login'] == true && $session['user']['id'] != $this->getUserId()) {//需要登陆时，但是登录的用户与session的user不一致
            return ['status' => false, 'msg' => '非法用户'];
        }
        if ($session['need_login'] !== SafeCenter::$operation[$session['type']]['need_login']) {
            return ['status' => false, 'msg' => '为了您的账户安全，请重新操作'];
        }
        $user = $this->getUser()->to_array();

        if (!$user['user_name']) {
            $user['user_name'] = $user['mobile'] ? $user['mobile'] : $user['email'];
        }
        return ['status' => true, 'user' => $user, 'type' => $type];
    }

    /**
     * 检查可用验证方式组合
     */
    private function inspectOperationVerify($type) {
        $way = SafeCenter::$operation[$type]['verify_way'];
        foreach ($way as $v) {//组合数/如3对组合
            foreach ($v as $vv) {//组合关系，将每一种校验方式检测以便
                $inspect_verify_way_isnull = $this->inspectVerifyWayIsnull($vv);
                if (!$inspect_verify_way_isnull['status']) {
                    unset($v);
                    continue;
                }
            }
        }
        return $way;
    }

    /**
     * 检查用户的验证方式是否可用
     * @Route("/safe-center/inspect-verify-way-isnull", name="passport_safe_center_inspect_verify_way_isnull")
     */
    private function inspectVerifyWayIsnull($verify_identity_way) {
        $user = $this->getUser()->to_array();

        switch ($verify_identity_way) {
        case 1://card_id,证件号
            $user_info = User::inspect_user_info($this->getPassportUser()->id, $user['type']);
            if ($user_info !== 1) {
                return ['status' => false, 'msg' => '用户基础信息未审核通过或未填写'];
            }
            break;
        case 2://手机验证码
            if (!$user['bind_mobile']) {
                return ['status' => false, 'msg' => '用户未绑定手机'];
            }
            break;
        case 3://支付密码
            if (!$user['pay_password']) {
                return ['status' => false, 'msg' => '用户未设置支付密码'];
            }
            break;
        case 4://登录密码
            if (!$user['password']) {
                return ['status' => false, 'msg' => '用户未设置密码'];
            }
            break;
        case 5://邮箱
            if (!$user['bind_email']) {
                return ['status' => false, 'msg' => '用户未绑定邮箱'];
            }
            break;
        case 6:

            break;
        case 'xxx':
            if ($this->inspectVerifyWayIsnull(1)['status']) {
                return ['status' => false, 'msg' => '用户证件存在'];
            }
            break;
        default:
            return ['status' => false, 'msg' => '未知验证类型'];
            break;
        }
        return ['status' => true];
    }

    /**
     * 验证邮箱验证码
     */
    protected function verifyEmail(Request $request) {
        $email_verify_code         = $request->get('email_verify_code');
        $inspect_email_verify_code = $this->emailMsgNoticeService->checkEmailVerifyCode('edit_important_info', $this->getPassportUser()->bind_email, $email_verify_code, $un = true);
        return !$inspect_email_verify_code['status'] ? $inspect_email_verify_code : ['status' => true];
    }

    /**
     * 验证手机验证码
     */
    protected function verifyMobile(Request $request) {
        $mobile_verify_code         = $request->get('mobile_verify_code');
        $inspect_mobile_verify_code = $this->mobileMsgNoticeService->checkMobileVerifyCode('edit_important_info', $this->getPassportUser()->bind_mobile, $mobile_verify_code);
        return !$inspect_mobile_verify_code['status'] ? $inspect_mobile_verify_code : ['status' => true];
    }

    /**
     * 验证登录密码
     */
    protected function verifyPassword(Request $request) {
        $password = $request->get('password');
        $inspect  = $this->userPassword->verifyUserPassword('login', $this->getPassportUser()->id, $password, true);
        return !$inspect['status'] ? $inspect : ['status' => true];
    }

    /**
     * 验证支付密码
     */
    protected function verifyPayPassword(Request $request) {
        $pay_password = $request->get('pay_password');
        $inspect      = $this->userPasswordService->verifyUserPassword('pay', $this->getPassportUser()->id, $pay_password, true);
        return !$inspect['status'] ? $inspect : ['status' => true];
    }

    /**
     * 验证证件号
     */
    protected function verifyCardId(Request $request) {
        $card_id   = $request->get('card_id');
        $user_info = RealNameAuthenticationInfo::first(['user_id' => $this->getUserId()], ['hydrate' => false]);
        if (!$user_info['business_license_no']) {
            return ['status' => false, 'msg' => '证件号不存在'];
        }
        if ($user_info['business_license_no'] != $card_id) {
            return ['status' => false, 'msg' => '证件号错误'];
        }
        return ['status' => true];
    }

    /**
     * 验证密保问题
     */
    protected function verifySafeQuestion(Request $request) {
        return ['status' => true];
    }

    /**
     * 身份验证方式
     * @Route("/safe-center/identity-verify-way", name="passport_safe_center_identity_verify_way")
     */
    public function identityVerifyWayAction(Request $request) {
        $type = $request->query->get('type');
        $user = $this->getUser()->to_array();
        $request->getSession()->set('SafeInspect', ['user' => $user, 'type' => $type, 'login' => true, 'need_login' => true, 'time' => time()]);
        $inspect_way_views = $this->inspectOperationVerify($type);
        foreach ($inspect_way_views as $k => &$v) {
            $ways           = SafeCenter::get_verify_ways_name($type, $k);//获取组合中文名
            $v['ways_ids']  = $ways['ways_ids'];
            $v['ways_name'] = $ways['ways_name'];
        }
        $user_check                = $this->getUser()->to_array();
        $user_check['bind_mobile'] = string_hidden($user_check['bind_mobile'], '*', 3, -4);
        $user_check['bind_email']  = string_hidden($user_check['bind_email'], '*', 3, 4);
        return $this->render('/Passport/SafeCenter/identity_verify_way.twig',
            [
                'type'              => $type,
                'user_check'        => $user_check,
                'inspect_way_views' => $inspect_way_views,
                'operation'         => SafeCenter::$operation
            ]
        );
    }

    /**
     * 验证身份
     * @Route("/safe-center/identity-verify", name="passport_safe_center_identity_verify")
     */
    public function identityVerifyAction(Request $request) {
        $type   = $request->query->get('type');
        $way_id = $request->query->get('verify_identity_way');//验证方式组合

        if (!$type || !$way_id) {
            return ['status' => false, 'msg' => '参数有误'];
        }

        $ways = $this->inspectOperationVerify($type);

        if (!$ways || !in_array($way_id, array_keys($ways))) {
            throw $this->createNotFoundException('非法操作');
        }

        $session_key = md5($this->getPassportUser()->id . '&type=' . $type . '&verify_identity_way=' . $way_id);//注意发送get参数的顺序

        if ($request->getMethod() === Request::METHOD_GET) {
            $request->getSession()->set($session_key, ['type' => $type, 'ways' => $ways[$way_id], 'way_id' => $way_id, 'out_time' => time()]);

            $way_name = SafeCenter::get_verify_ways_name($type, $way_id)['ways_name'];

            $user_check                = $this->getUser()->to_array();
            $user_check['bind_mobile'] = string_hidden($user_check['bind_mobile'], '*', 3, -4);
            $user_check['bind_email']  = string_hidden($user_check['bind_email'], '*', 3, 4);

            return $this->render('/Passport/SafeCenter/identity_verify.twig',
                [
                    'inspect_way_views'   => $ways[$way_id],
                    'type'                => $type,
                    'way_name'            => $way_name,
                    'verify_identity_way' => $way_id,
                    'user_check'          => $user_check,
                    'operation'           => SafeCenter::$operation
                ]
            );
        } elseif ($request->getMethod() === Request::METHOD_POST) {
            // 下一步按钮
            $session = $request->getSession()->get($session_key);

            if (empty($session['ways']) || $session['out_time'] < time() - 300 || $session['type'] != $type || $session['way_id'] != $way_id) {
                $request->getSession()->remove($session_key);
                return ['status' => false, 'msg' => '为了您的账户安全，请刷新页面后再试'];
            }
            // 执行验证
            $inspect = $this->inspectMethod($request, $session['ways']);
            if (!$inspect['status']) {
                return $inspect;
            }
            $request->getSession()->set($this->getPassportUser()->id . 'setp1', ['type' => $session['type'], 'time' => time()]);
            return ['status' => true];
        }
    }

    /**
     * 执行各种验证方式的方法
     */
    protected function inspectMethod(Request $request, $ways) {
        // 逐个验证合法性
        foreach ($ways as $k => $v) {
            if (!is_numeric($v)) {
                continue;
            }
            $method = SafeCenter::$verify_identity_way[$v]['inspect_method'];

            $result = $this->$method($request);

            if (!$result['status']) {
                return $result;
            }
        }
        return ['status' => true, 'msg' => '校验成功'];
    }

    /**
     * @Route("/safe-center/operation-finish", name="passport_safe_center_operation_finish")
     */
    public function operationFinishAction(Request $request) {
        $type = $request->query->get('type');
        return $this->render('/Passport/SafeCenter/operation_finish.twig',['type' => $type, 'operation' => SafeCenter::$operation]);
    }

    /**
     * @Route("/safe-center/operation-exec", name="passport_safe_center_operation_exec")
     */
    public function operationExecAction(Request $request) {
        // 安全检测
        $SafeInspect = $this->safeInspect($request);

        if (!$SafeInspect['status']) {
            throw $this->createNotFoundException($SafeInspect['msg']);
        }

        $type    = $request->get('type');
        $success = $request->get('success', 0);
        $session = $request->getSession()->get($this->getPassportUser()->id . 'setp1');
        if (!$session || $session['type'] != $type || $session['time'] < time() - 300) {
            //throw $this->createNotFoundException('抱歉，您的操作存在风险！为了您账户的安全，请关闭页面后重新操作');
            //return '抱歉，您的操作存在风险！为了您账户的安全，请关闭页面后重新操作';
        }
        if ($request->getMethod() === Request::METHOD_POST) {
            //执行更新操作
            $execute = SafeCenter::$operation[$type]['operation_do_method'];
            return $this->$execute($request);
        }
        return $this->render('/Passport/SafeCenter/operation_user_info.twig', ['success' => $success, 'type' => $type, 'operation' => SafeCenter::$operation]);
    }

    /**
     * @Route("/safe-center/operation-done", name="passport_safe_center_operation_done")
     */
    public function operationDoneAction(Request $request) {
        $type = $request->query->get('type');
        return $this->renderPartial('/Passport/SafeCenter/operation_done.twig', ['type' => $type]);
    }

    /**
     * 修改手机---1，8
     */
    protected function updateMobile(Request $request) {
        $new_mobile                 = $request->get('mobile');
        $mobile_verify_code         = $request->get('mobile_verify_code');
        $inspect_mobile_verify_code = $this->mobileMsgNoticeService->checkMobileVerifyCode('edit_important_info', $new_mobile, $mobile_verify_code);
        if (!$inspect_mobile_verify_code['status']) {
            return $inspect_mobile_verify_code;
        }
        if ($new_mobile == $this->getPassportUser()->bind_mobile) {
            return ['status' => false, 'msg' => '新手机不能与原来的一样'];
        }

        $result = false;
        $txt    = '';
        try {
            $result = User::transaction(function () use ($new_mobile, $request) {
                User::update_all(['mobile' => $new_mobile, 'bind_mobile' => $new_mobile, 'edit_time' => time()], ['id' => $this->getUserId()]);

                // 写入日志
                OperationLog::create([
                    'user_id'     => $this->getUserId(),
                    'log_type'    => OperationLog::OPERATION_EDIT,
                    'platform_id' => Platform::PASSPORT,
                    'info'        => "通行证{$this->getPassportUser()->email}用户修改密保手机号码为{$new_mobile}",
                    'ip'          => $request->getClientIp(),
                    'add_time'    => time(),
                ]);
                return true;
            });
        } catch (\Exception $e) {
            $txt = '修改手机失败';
            $this->logger->error($txt, ['stack' => $e->getTraceAsString(), 'error' => $e->getMessage()]);
        }

        return ['status' => $result, 'msg' => $txt];
    }

    /**
     * 修改邮箱---2，7
     */
    protected function updateEmail(Request $request) {
        $email_verify_code = $request->get('email_verify_code');
        $new_email         = $request->get('email');

        $inspect_email_verify_code = $this->emailMsgNoticeService->checkEmailVerifyCode('edit_important_info', $new_email, $email_verify_code, $un = true);//校验验证码
        if (!$inspect_email_verify_code['status']) {
            return $inspect_email_verify_code;
        }
        if ($new_email == $this->getPassportUser()->bind_email) {
            return ['status' => false, 'msg' => '新邮箱不能与原来的一样'];
        }

        $data = ['bind_email' => $new_email, 'edit_time' => time()];

        if ($request->get('is_user') == 'yes') {
            $data['email'] = $new_email;
        }

        $result = false;
        $txt    = '';
        try {
            $result = User::transaction(function () use ($data, $request) {
                User::update_all($data, ['id' => $this->getUserId()]);

                // 写入日志
                OperationLog::create([
                    'user_id'     => $this->getUserId(),
                    'log_type'    => OperationLog::OPERATION_EDIT,
                    'platform_id' => Platform::PASSPORT,
                    'info'        => "通行证{$this->getPassportUser()->email}用户修改绑定邮箱为{$data['bind_email']}",
                    'ip'          => $request->getClientIp(),
                    'add_time'    => time(),
                ]);
                return true;
            });
        } catch (\Exception $e) {
            $txt = '修改邮箱失败';
            $this->logger->error($txt, ['stack' => $e->getTraceAsString(), 'error' => $e->getMessage()]);
        }

        return ['status' => $result, 'msg' => $txt];
    }

    /**
     * 修改密码---3，4，5，6
     */
    protected function updatePassword(Request $request) {
        $type             = $request->get('type');
        $new_password     = $request->get('new_password');
        $confirm_password = $request->get('confirm_password');

        if ($new_password === '') {
            return ['status' => false, 'msg' => '密码不能为空'];
        }
        if ($new_password !== $confirm_password) {
            return ['status' => false, 'msg' => '两次输入的密码不一致'];
        }
        if (!in_array($type, ['3', '4', '5', '6'])) {
            return ['status' => false, 'msg' => '错误的操作类型'];
        }

        $set_password = $this->userPasswordService->setUserPassword($new_password);

        $update_field = in_array($type, ['3', '5']) ? 'password' : 'pay_password';
        $field        = $update_field == 'password' ? 'pay_password' : 'password';

        if ($this->getPassportUser()->$update_field == $set_password) {
            return ['status' => false, 'msg' => '新密码不能与旧密码相同'];
        }

        $this->getPassportUser()->$update_field = $set_password;
        if ($this->getPassportUser()->$field == $set_password) {
            return ['status' => false, 'msg' => '登录密码与支付密码不能相同！'];
        }

        $result = 0;
        $txt    = '';

        try {
            $result = User::transaction(function () use ($update_field, $set_password, $request) {
                User::update_all([$update_field => $set_password, 'edit_time' => time()], ['id' => $this->getUserId()]);
                // 写入日志
                OperationLog::create([
                    'user_id'     => $this->getUserId(),
                    'log_type'    => OperationLog::OPERATION_EDIT,
                    'platform_id' => Platform::PASSPORT,
                    'info'        => "通行证{$this->getPassportUser()->email}用户修改{$update_field}密码为{$set_password}",
                    'ip'          => $request->getClientIp(),
                    'add_time'    => time(),
                ]);
                return true;
            });
        } catch (\Exception $e) {
            $txt = '修改密码失败';
            $this->logger->error($txt, ['stack' => $e->getTraceAsString(), 'error' => $e->getMessage()]);
        }

        return ['status' => $result, 'msg' => $txt];
    }

    /**
     * 设为解除绑定---9，10
     */
    protected function delBind(Request $request) {
        $type = $request->get('type');

        if (!in_array($type, ['9', '10'])) {
            return ['status' => false, 'msg' => '错误的操作类型'];
        }

        if ($type == 9) {
            if (!$this->getPassportUser()->bind_email) {
                return ['status' => false, 'msg' => '邮箱或手机必须绑定一个'];
            }
            $data = ['mobile' => null, 'bind_mobile' => null];
        } elseif ($type == 10) {
            if (!$this->getPassportUser()->bind_mobile) {
                return ['status' => false, 'msg' => '邮箱或手机必须绑定一个'];
            }
            $data = ['email' => null, 'bind_email' => null];
        }

        $action = $type == 9 ? 'mobile' : 'email';
        $result = false;
        $txt    = '';
        try {
            $result = User::transaction(function () use ($data, $request, $action) {
                User::update_all(array_merge($data, ['edit_time' => time()]), ['id' => $this->getUserId()]);

                // 写入日志
                OperationLog::create([
                    'user_id'     => $this->getUserId(),
                    'log_type'    => OperationLog::OPERATION_UNBIND,
                    'platform_id' => Platform::PASSPORT,
                    'info'        => "通行证{$this->getPassportUser()->email}用户" . OperationLog::OPERATIONS[OperationLog::OPERATION_UNBIND] . "{$action}",
                    'ip'          => $request->getClientIp(),
                    'add_time'    => time(),
                ]);
                return true;
            });
        } catch (\Exception $e) {
            $txt = '解除绑定失败';
            $this->logger->error($txt, ['stack' => $e->getTraceAsString(), 'error' => $e->getMessage()]);
        }

        return ['status' => $result, 'msg' => $txt];
    }

    /**
     * 设为登录帐号---11，12
     */
    protected function setLoginAccount(Request $request) {
        $type = $request->get('type');
        if (!in_array($type, ['11', '12'])) {
            return ['status' => false, 'msg' => '错误的操作类型'];
        }

        if ($type == 11) {
            if (User::exists(['mobile' => $this->getPassportUser()->bind_mobile])) {
                return ['status' => false, 'msg' => '该手机已被其他账户设为登录帐号，如果该手机是您的可登录解绑后继续'];
            }
            $data = ['mobile' => $this->getPassportUser()->bind_mobile];
        } elseif ($type == 12) {
            if (User::exists(['email' => $this->getPassportUser()->bind_email])) {
                return ['status' => false, 'msg' => '该邮箱已被其他账户设为登录帐号，如果该邮箱是您的可登录解绑后继续'];
            }
            $data = ['email' => $this->getPassportUser()->bind_email];
        }

        $action = $type == 11 ? 'mobile' : 'email';
        $result = false;
        $txt    = '';
        try {
            $result = User::transaction(function () use ($data, $request, $action) {
                User::update_all(array_merge($data, ['edit_time' => time()]), ['id' => $this->getUserId()]);

                // 写入日志
                OperationLog::create([
                    'user_id'     => $this->getUserId(),
                    'log_type'    => OperationLog::OPERATION_BIND,
                    'platform_id' => Platform::PASSPORT,
                    'info'        => "通行证{$this->getPassportUser()->email}用户设置{$data[$action]}为登录账户",
                    'ip'          => $request->getClientIp(),
                    'add_time'    => time(),
                ]);
                return true;
            });
        } catch (\Exception $e) {
            $txt = '保存失败';
            $this->logger->error($txt, ['stack' => $e->getTraceAsString(), 'error' => $e->getMessage()]);
        }

        return ['status' => $result, 'msg' => $txt];
    }

    /**
     * 解锁密码---13，14
     */
    protected function unlockPassword(Request $request) {
        $type = $request->get('type');

        if (!in_array($type, ['13', '14'])) {
            return ['status' => false, 'msg' => '错误的操作类型'];
        }

        if ($type == 13) {
            $data = ['password_error_num' => 0];
        } elseif ($type == 14) {
            $data = ['pay_password_error_num' => 0];
        }

        $action = $type == 13 ? 'password_error_num' : 'pay_password_error_num';
        $result = false;
        $txt    = '';
        try {
            $result = User::transaction(function () use ($data, $request, $action) {
                User::update_all(array_merge($data, ['edit_time' => time()]), ['id' => $this->getUserId()]);

                // 写入日志
                OperationLog::create([
                    'user_id'     => $this->getUserId(),
                    'log_type'    => OperationLog::OPERATION_BIND,
                    'platform_id' => Platform::PASSPORT,
                    'info'        => "通行证{$this->getPassportUser()->email}用户解锁密码{$action}",
                    'ip'          => $request->getClientIp(),
                    'add_time'    => time(),
                ]);
                return true;
            });
        } catch (\Exception $e) {
            $txt = '保存失败';
            $this->logger->error($txt, ['stack' => $e->getTraceAsString(), 'error' => $e->getMessage()]);
        }

        return ['status' => $result, 'msg' => $txt];
    }

    /**
     * 设置密保问题---15，16
     */
    protected function updateSafeQuestion(Request $request) {
        $type    = $request->query->get('type');
        $content = $request->request->all();

        if (count($content) < 3) {
            return ['status' => false, 'msg' => '问题不能相同'];
        }
        if (!in_array($type, ['15', '16'])) {
            return ['status' => false, 'msg' => '错误的操作类型'];
        }
        foreach ($content as $k => $v) {
            if (strlen($k) > 30) {
                return ['status' => false, 'msg' => "问题过长({$k})"];
            }
            if (strlen($v) > 30) {
                return ['status' => false, 'msg' => "问题({$k})的答案过长"];
            }
        }

        $result = false;
        try {
            if ($type == 15) {
                $result = User::transaction(function () use ($content, $request) {
                    (new user_safe_question())->create([
                        'user_id'   => $this->getPassportUser()->id,
                        'content'   => \GuzzleHttp\json_encode($content, JSON_UNESCAPED_UNICODE),
                        'ip'        => $request->getClientIp(),
                        'add_time'  => time(),
                        'edit_time' => time(),
                    ]);
                    User::update_all(['is_safe_question' => 'Y','edit_time' => time()],['id' => $this->getPassportUser()->id]);
                    // 写入日志
                    OperationLog::create([
                        'user_id'     => $this->getUserId(),
                        'log_type'    => OperationLog::OPERATION_SETTING,
                        'platform_id' => Platform::PASSPORT,
                        'info'        => "通行证“{$this->getPassportUser()->email}”用户" . OperationLog::OPERATIONS[OperationLog::OPERATION_SETTING] . "密保问题",
                        'ip'          => $request->getClientIp(),
                        'add_time'    => time(),
                    ]);
                    return true;
                });
            } elseif ($type == 16) {
                $result = User::transaction(function () use ($content, $request) {
                    (new user_safe_question())->update_all([
                        'edit_time' => time(),
                        'ip'        => $request->getClientIp(),
                        'content'   => \GuzzleHttp\json_encode($content, JSON_UNESCAPED_UNICODE)
                    ], [
                        'user_id' => $this->getPassportUser()->id
                    ]);
                    // 写入日志
                    OperationLog::create([
                        'user_id'     => $this->getUserId(),
                        'log_type'    => OperationLog::OPERATION_EDIT,
                        'platform_id' => Platform::PASSPORT,
                        'info'        => "通行证“{$this->getPassportUser()->email}”用户" . OperationLog::OPERATIONS[OperationLog::OPERATION_EDIT] . "密保问题",
                        'ip'          => $request->getClientIp(),
                        'add_time'    => time(),
                    ]);
                    return true;
                });
            }
            $txt = '设置成功';
        } catch (\Exception $e) {
            $txt = '保存失败';
            $this->logger->error($txt, ['stack' => $e->getTraceAsString(), 'error' => $e->getMessage()]);
        }

        return ['status' => (boolean)$result, 'msg' => $txt];
    }

    /**
     * @Route("/safe-center/send-user-email-verify", name="passport_safe_center_send_user_email_verify")
     */
    public function sendUserEmailVerifyAction(Request $request, EmailMsgNoticeService $emailMsgNoticeService, RecaptchaService $recaptchaService) {
        if ($request->getMethod() != Request::METHOD_POST) {
            return ['status' => false, 'msg' => '非法操作'];
        }
        return $emailMsgNoticeService->sendEmailVerifyCode('edit_important_info', $this->getPassportUser()->bind_email, $request->request->get('verify_code'), true, $recaptchaService);
    }

    /**
     * @Route("/safe-center/send-user-mobile-verify", name="passport_safe_center_send_user_mobile_verify")
     */
    public function sendUserMobileVerifyAction(Request $request, MobileMsgNoticeService $mobileMsgNoticeService, RecaptchaService $recaptchaService) {
        if ($request->getMethod() != Request::METHOD_POST) {
            return ['status' => false, 'msg' => '非法操作'];
        }
        return $mobileMsgNoticeService->sendMobileVerifyCode('edit_important_info', $this->getPassportUser()->bind_mobile, $request->request->get('verify_code'), true, $recaptchaService);
    }

    /**
     * @Route("/safe-center/send-mobile-verify", name="passport_safe_center_send_mobile_verify")
     */
    public function sendMobileVerifyAction(Request $request, MobileMsgNoticeService $mobileMsgNoticeService, RecaptchaService $recaptchaService) {
        if ($request->getMethod() !== Request::METHOD_POST) {
            return ['status' => false, 'msg' => '非法操作'];
        }
        return $mobileMsgNoticeService->sendMobileVerifyCode('edit_important_info', $request->request->get('mobile'), $request->request->get('verify_code'), true, $recaptchaService);
    }

    /**
     * @Route("/safe-center/send-email-verify", name="passport_safe_center_send_email_verify")
     */
    public function sendEmailVerifyAction(Request $request, EmailMsgNoticeService $emailMsgNoticeService, RecaptchaService $recaptchaService) {
        if ($request->getMethod() !== Request::METHOD_POST) {
            return ['status' => false, 'msg' => '非法操作'];
        }
        return $emailMsgNoticeService->sendEmailVerifyCode('edit_important_info', $request->request->get('email'), $request->request->get('verify_code'), true, $recaptchaService);
    }

}