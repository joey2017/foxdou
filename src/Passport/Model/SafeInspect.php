<?php

namespace App\Passport\Model;

use App\Common\Model\AutoGenerated\user_safe_question;
use App\Common\Model\BaseModel;
use App\Common\Model\User\User;
use App\Common\Model\User\UserIdentity;

class SafeInspect extends BaseModel {

    public static function safeInspetList($user) {
        //满分100分
        $list         = [
            'bindMobile'   => [
                'title'      => '安全手机',
                'info'       => '您还未绑定安全手机',
                'href'       => '/passport/tool',
                'href_title' => '立即绑定',
                'safe_title' => '安全手机',
                'safe_info'  => '安全手机已绑定'
            ],
            'bindEmail'     => [
                'title'      => '安全邮箱',
                'info'       => '您还未绑定安全邮箱',
                'href'       => '/passport/tool?type=email',
                'href_title' => '立即绑定',
                'safe_title' => '安全邮箱',
                'safe_info'  => '安全邮箱已绑定'
            ],
            'safeQuestion' => [
                'title'      => '密保问题',
                'info'       => '您还未设置密保问题',
                'href'       => '/passport/tool?type=question',
                'href_title' => '立即设置',
                'safe_title' => '密保问题',
                'safe_info'  => '密保问题已设置'
            ],
            'realName'     => [
                'title'      => '实名认证',
                'info'       => '未进行实名认证或未通过审核',
                'href'       => '/passport/identity',
                'href_title' => '立即认证',
                'safe_title' => '实名认证',
                'safe_info'  => '实名认证已完成'
            ],
        ];
        $safe_num     = 0;
        $score_list   = 100 / count($list);//算出每一项的占比分
        $inspect_data = ['true' => [], 'false' => []];
        foreach ($list as $k => $v) {
            $inspect = self::$k($user);
            if ($inspect['status']) {
                $safe_num               = $safe_num + 1;
                $inspect_data['true'][] = $list[$k];
            } else {
                $inspect_data['false'][] = $list[$k];
            }
        }

        $score   = round($score_list * $safe_num, 1);//算出帐号得分
        $all_num = floor($score / 20);//img满橙色 数量
        $ban_num = $score % 20;//如果有余数则显示半灰
        return ['score' => $score, 'inspect_data' => $inspect_data, 'all_num' => $all_num, 'ban_num' => $ban_num, 'loser_num' => count($list) - $safe_num];
    }

    public static function bindMobile($user) {
        return ['status' => $user->bind_mobile ? true : false];
    }

    public static function bindEmail($user) {
        return ['status' => $user->bind_email ? true : false];
    }

    public static function safeQuestion($user) {
        return ['status' => (new user_safe_question())->first(['user_id' => $user->id]) ? true : false];
    }

    public static function realName($user) {
        return ['status' => $user->real_name_status == UserIdentity::STATUS_VERIFIED ? true : false];
    }

}