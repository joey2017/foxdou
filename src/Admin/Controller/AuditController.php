<?php

namespace App\Admin\Controller;

use App\Admin\Model\AdminOperationLog;
use App\Common\Model\AutoGenerated\agent_users;
use App\Common\Model\AutoGenerated\open_users;
use App\Common\Model\AutoGenerated\sup_users;
use App\Common\Model\Product\ProductTencentCategory;
use App\MobileNetworkOperator;
use App\Common\Model\Payment\CashUserAccount;
use App\Common\Model\Payment\SellCashUserLog;
use App\Common\Model\Product\Product;
use App\Common\Model\Product\ProductSource;
use App\Common\Model\Product\SourceGroup;
use App\Common\Model\Region;
use App\Common\Model\User\OpenPlatformAccount;
use App\Common\Model\User\RealNameAuthenticationInfo;
use App\Common\Model\User\ResellerAccount;
use App\Common\Model\User\SupplierAccount;
use App\Common\Model\User\User;
use App\Common\Model\User\UserIdentity;
use App\Common\Model\User\UsersAccountApplication;
use App\Common\Model\User\UsersOpenAccountLog;
use App\Common\Model\User\UsersPremiumAccount;
use App\Common\Service\Product\ProductCate;
use App\Common\Service\SmsService;
use App\Constants;
use App\Platform;
use App\ProductConstants;
use SimpleRecord\DateTime;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\Routing\Annotation\Route;
use Symfu\SimpleFormBundle\Form;
use function Symfu\SimpleFormBundle\to_enum;

/**
 * @Route("/", defaults={"group": "audit-management"})
 */
class AuditController extends AdminBaseController {

    /**
     * @Route("/audit/identities", name="admin_audit_identities")
     */
    public function identitiesAction(Request $request, Form $form) {
        if (!$request->isXmlHttpRequest()) {
            return $this->render("/Admin/Audit/identities.twig");
        }

        $form->init([
            'passport_name' => [''],
            'account'       => [''],
            'user_type'     => [to_enum(User::TYPES)],
            'status'        => [to_enum(UserIdentity::STATUSES)],
            'start_time'    => ['date'],
            'end_time'      => ['date'],
        ]);

        if (!$form->validate($request->query)) {
            return ['status' => false, 'msg' => '数据有误，请重新提交'];
        }
        $where = ['i.status' => $form->status, 'i.entity_type' => $form->user_type, 'passport_name' => $form->passport_name];
        $joins = 'LEFT JOIN ' . User::table_name() . ' AS u ON u.id=i.user_id ' .
            'LEFT JOIN ' . UsersPremiumAccount::table_name() . ' AS pa ON pa.user_id=i.user_id ';

        $options = [
            'select' => "i.id, i.user_id, i.entity_type, i.entity_name, i.entity_license_no, i.entity_license_address, i.entity_license_valid_from, i.entity_license_valid_to, i.entity_license_valid_long_term, 
                        i.entity_license_front_image_url, i.entity_license_back_image_url, i.entity_license_handheld_image_url, 
                        i.entity_license_business_scopes, 
                        i.biz_legal_representative_name, i.biz_legal_representative_id_no, i.biz_legal_representative_id_valid_from, i.biz_legal_representative_id_valid_to, i.biz_legal_representative_id_valid_long_term, 
                        i.biz_legal_representative_id_front_image_url, 
                        i.biz_legal_representative_id_back_image_url, 
                        i.biz_legal_representative_id_handheld_image_url, 
                        i.status, i.status_info, i.submission_ip, DATE_FORMAT(i.submitted_at, ' %Y-%m-%d %H:%i:%S') as submitted_at,  DATE_FORMAT(IFNULL(i.verified_at, i.rejected_at), '%Y-%m-%d %H:%i:%S') as reviewed_at, 
                        i.province_code, i.city_code, i.district_code, i.certification_level, i.note,
                        pa.account, if(u.type='I', u.mobile, u.email) as passport_name, i.note",
            'from'   => UserIdentity::table_name() . ' AS i',
            'joins'  => $joins,
            'order'  => 'i.id DESC'
        ];

        if ($form->account) {
            $where['pa.account'] = ['LIKE' => '%' . $form->account . '%'];
        }

        if ($form->passport_name) {
            $where['u.email'] = ['LIKE' => '%' . $form->passport_name . '%'];
        }

        $start_time = strtotime(!empty($form->start_time) ? $form->start_time : date('Y-m-d'));
        $end_time   = strtotime(!empty($form->end_time) ? $form->end_time : date('Y-m-d')) + 86399;

        if ($end_time - $start_time > 30 * 86400) {
            return ['status' => false, 'msg' => '日期范围不允许超过30天'];
        }

        if ($end_time > $start_time) {
            $where['i.created_at'] = ['BETWEEN' => [date('Y-m-d', $start_time), date('Y-m-d H:i:s', $end_time)]];
        }

        list($data, $total) = UserIdentity::paginate($where, $options, $form->page, $form->limit);
        foreach ($data as &$row) {
            $row['status_text']                              = UserIdentity::STATUSES[$row['status']] ?? "未知({$row['status']})";
            $row['entity_type']                              = User::TYPES[$row['entity_type']] ?? "未知({$row['entity_type']})";
            $row['entity_license_valid_period']              = $row['entity_license_valid_long_term'] ? '长期' : $row['entity_license_valid_from'] . ' ~ ' . $row['entity_license_valid_to'];
            $row['biz_legal_representative_id_valid_period'] = $row['biz_legal_representative_id_valid_long_term'] ? '长期' : $row['biz_legal_representative_id_valid_from'] . ' ~ ' . $row['biz_legal_representative_id_valid_to'];
        }

        return ['status' => true, 'data' => $data, 'total' => $total];
    }

    /**
     * 实名认证审核
     * @Route("/audit/identity-review/submit", name="admin_audit_identity_review_submit")
     */
    public function identityReviewSubmitAction(Request $request, Form $form) {
        $form->init([
            'id'     => ['required, integer'],
            'status' => ['required, enum[VERIFIED|REJECTED]'],
            'note'   => ['required, max_length[100]'],
        ]);

        if (!$form->validate($request->request)) {
            return ['status' => false, 'msg' => '参数有误', 'errors' => $form->getErrors()];
        }

        try {
            if (!($identity = UserIdentity::find($form->id))) {
                return ['status' => false, 'msg' => '未找到指定数据'];
            }
            if (!($user = User::find($identity->user_id))) {
                return ['status' => false, 'msg' => '未找到指定数据'];
            }

            $context = ['admin_id' => $this->getUserId(), 'user_id' => $user->id, 'identity_id' => $form->id, 'status' => $form->status];

            UserIdentity::transaction(function () use ($form, $identity, $user, $request, $context) {
                $operation = $form->status === UserIdentity::STATUS_VERIFIED ? '通过' : '不通过';

                //1.更新记录状态
                $now = new DateTime();
                if ($form->status === UserIdentity::STATUS_VERIFIED) {// 审核通过
                    $identity->update_attributes(['status' => UserIdentity::STATUS_VERIFIED, 'note' => $form->note, 'verified_at' => $now, 'rejected_at' => null, 'full_reviewed_at' => $now]);
                    $user->real_name_status = UserIdentity::STATUS_VERIFIED;

                    if ($user->assign_account === User::ASSIGN_STATUS_NO) {
                        //2.分配初始靓号
                        $premiumAccount = UsersPremiumAccount::create([
                            'user_id'  => $user->id,
                            'account'  => rand(100000,999999), // 测试用
                            'status'   => 0,
                            'add_time' => time()
                        ]);

                        $context['assigned_premium_account'] = $premiumAccount->account;

                        //3.更新通行证实名认证信息,靓号分配状态
                        $user->assign_account = User::ASSIGN_STATUS_YES;
                        $user->edit_time      = time();
                    }

                    $user->save();
                } else {// 审核不通过
                    //1.更新记录状态
                    $identity->update_attributes(['status' => UserIdentity::STATUS_REJECTED, 'note' => $form->note, 'rejected_at' => $now, 'verified_at' => null]);
                    $user->update_attributes(['real_name_status' => UserIdentity::STATUS_REJECTED, 'edit_time' => time()]);
                }

                //写入日志
                AdminOperationLog::create([
                    'user_id'      => $this->getAdminUser()->id,
                    'type'         => AdminOperationLog::OPERATION_REVIEW,
                    'subject_type' => AdminOperationLog::SUBJECT_IDENTITY,
                    'info'         => "后台用户[{$this->getAdminUser()}]" . AdminOperationLog::OPERATIONS[AdminOperationLog::OPERATION_REVIEW] . $operation . "用户“{$user}”的实名认证申请",
                    'ip'           => $request->getClientIp(),
                    'add_time'     => date('Y-m-d H:i:s'),
                    'context'      => json_encode($context, JSON_UNESCAPED_UNICODE),
                ]);
            });

            //发送邮件或手机短信（待完善）

            return ['status' => true, 'msg' => '操作成功'];
        } catch (\Exception $e) {
            $this->logger->error('实名认证审核操作失败', array_merge($context, ['error' => $e->getMessage(), 'stack' => $e->getTraceAsString()]));
            return ['status' => false, 'msg' => '操作失败，请重试'];
        }
    }


    /**
     * 获取实名认证申请信息
     * @Route("/audit/get-real-names-info", name="admin_audit_get_real_names_info")
     */
    /*public function getRealNamesInfoAction(Request $request){
        $id = $request->request->get('id');

        if (!$id) {
            return ['status' => false,'msg' => '参数有误'];
        }
        $result = UserIdentity::find($id,['hydrate' => false]);
        if (empty($result)) {
            return ['status' => false,'msg' => '未找到指定数据'];
        }

        return ['status' => true,'msg' => '获取成功','data' => $result];
    }*/

    /**
     * 开户申请列表
     * @Route("/audit/account-application", name="admin_audit_account_application")
     */
    public function accountApplicationAction(Request $request, Form $form) {
        if ($request->query->count() <= 1) {
            return $this->render("Admin/Audit/account_application.twig");
        }
        $form->init([
            'account'     => ['digit'],
            'pass'        => [''],
            'status'      => [to_enum(UsersAccountApplication::REVIEW_STATUSES)],
            'type'        => [to_enum(User::TYPES)],
            'platform_id' => [to_enum(Platform::PLATFORMS)],
            'start_time'  => ['date'],
            'end_time'    => ['date'],
        ]);

        if (!$form->validate($request->query)) {
            return ['status' => false, 'msg' => '数据有误，请重新提交'];
        }

        $where = ['aa.status' => $form->status, 'u.type' => $form->type, 'aa.platform_id' => $form->platform_id];

        if ($form->pass) {
            //暂时模糊查询邮箱，手机号的待完善
            $where['u.email'] = ['LIKE' => '%' . $form->pass . '%'];
        }

        if ($form->account) {
            $where['pa.account'] = ['LIKE' => '%' . $form->account . '%'];
        }

        $joins   = 'LEFT JOIN ' . User::table_name() . ' AS u ON u.id=aa.user_id ' .
            'LEFT JOIN ' . UsersPremiumAccount::table_name() . ' AS pa ON pa.user_id=aa.user_id ' .
            'LEFT JOIN ' . UserIdentity::table_name() . ' AS rn ON u.id=rn.user_id ' .
            'LEFT JOIN ' . Region::table_name() . ' AS r ON r.id=rn.district_code';
        $options = [
            'select' => 'aa.*,pa.account,if(u.type="I",u.mobile,u.email) as pass,u.type' .
                ',rn.entity_name as legal_person_name,rn.entity_license_no as identity_card_no' .
                ',rn.entity_name as business_name,rn.entity_license_address as business_address,rn.entity_license_no as business_license_no,rn.province_code,' .
                'rn.city_code,rn.district_code,r.area_name',
            'from'   => UsersAccountApplication::table_name() . ' AS aa',
            'joins'  => $joins,
            'order'  => 'aa.id DESC'
        ];

        $start_time = strtotime($form->start_time ?? date('Y-m-d'));
        $end_time   = strtotime($form->end_time ?? date('Y-m-d')) + 86399;
        if ($end_time - $start_time > 30 * 86400) {
            return ['status' => false, 'msg' => '日期范围不允许超过30天'];
        }

        if ($end_time > $start_time) {
            $where['aa.add_time'] = ['BETWEEN' => [$start_time, $end_time]];
        }

        list($data, $total) = UsersAccountApplication::paginate($where, $options, $form->page, $form->limit);
        return ['status' => true, 'data' => $data, 'total' => $total];
    }

    /**
     * 开户申请审核
     * @Route("/audit/account-review", name="admin_audit_account_review")
     */
    public function accountReviewAction(Request $request, SmsService $smsService) {
        $ids    = $request->request->get('id');
        $status = $request->request->get('status');
        $note   = $request->request->get('note', '');

        if (!$ids || !in_array($status, [UsersAccountApplication::REVIEW_REVIEWED_SUCCESS, UsersAccountApplication::REVIEW_REVIEWED_FAIL])) {
            return ['status' => false, 'msg' => '参数有误'];
        }

        $options         = [
            'select'  => 'u.user_name,u.open_methods,if(u.type="I",u.mobile,u.email) as pass,aa.*',
            'from'    => UsersAccountApplication::table_name() . ' AS aa',
            'joins'   => 'LEFT JOIN ' . User::table_name() . ' AS u ON u.id=aa.user_id',
            'order'   => 'aa.id DESC',
            'hydrate' => false,
        ];
        $user_real_names = UsersAccountApplication::first(['aa.id' => $ids], $options);
        if (empty($user_real_names)) {
            return ['status' => false, 'msg' => '未找到指定数据'];
        }

        $result = false;

        if ($status == UsersAccountApplication::REVIEW_REVIEWED_SUCCESS) {// 审核通过
            $operation = '通过';
            try {
                $result = UsersAccountApplication::transaction(function () use ($status, $user_real_names, $note, $request, $smsService) {
                    //1.更新记录状态
                    UsersAccountApplication::update_all([
                        'status'    => $status,
                        'edit_time' => time(),
                        'note'      => $note
                    ], [
                        'id' => $user_real_names['id']
                    ]);

                    //2.开通相应平台账户并激活
                    switch ($user_real_names['platform_id']) {
                    case 2:
                        OpenPlatformAccount::create([
                            'user_id'  => $user_real_names['user_id'],
                            'status'   => OpenPlatformAccount::STATUS_ACTIVE,
                            'add_time' => time()
                        ]);
                        break;
                    case 3:
                        SupplierAccount::create([
                            'user_id'   => $user_real_names['user_id'],
                            'status'    => SupplierAccount::STATUS_ACTIVE,
                            'add_time'  => time(),
                            'edit_time' => time()
                        ]);
                        break;
                    case 5:
                        ResellerAccount::create([
                            'user_id'  => $user_real_names['user_id'],
                            'status'   => ResellerAccount::STATUS_ACTIVE,
                            'add_time' => time()
                        ]);
                        break;
                    default;
                        break;
                    }

                    //3.是否填写邀请人狐豆号
                    if ($user_real_names['referrer_account'] !== '') {
                        $referrer = UsersPremiumAccount::first(['account' => $user_real_names['referrer_account']]);
                        if ($referrer) {
                            switch ($user_real_names['platform_id']) {
                            case 2:
                                OpenPlatformAccount::update_all([
                                    'parent_dealer_user_id' => $referrer['user_id'],
                                    'edit_time'             => time()
                                ], [
                                    'user_id' => $user_real_names['user_id']
                                ]);
                                break;
                            case 3:
                                SupplierAccount::update_all([
                                    'parent_dealer_user_id' => $referrer['user_id'],
                                    'edit_time'             => time()
                                ], [
                                    'user_id' => $user_real_names['user_id']
                                ]);
                                break;
                            case 5:
                                ResellerAccount::update_all([
                                    'parent_dealer_user_id' => $referrer['user_id'],
                                    'edit_time'             => time()
                                ], [
                                    'user_id' => $user_real_names['user_id']
                                ]);
                                break;
                            default;
                                break;
                            }
                        } else {
                            $this->logger->error('开户申请审核通过时发生错误', '未找到开户申请时填写的狐豆号');
                        }
                    }

                    //4.更新通行证平台开通信息
                    User::update_all([
                        'is_open_platform' => User::AGENTPLATFORM_STATUS_YES,
                        'edit_time'        => time()
                    ]);

                    //5.平台账户开通记录
                    UsersOpenAccountLog::create([
                        'user_id'     => $user_real_names['user_id'],
                        'pass'        => $user_real_names['pass'],
                        'method'      => UsersOpenAccountLog::METHODS_REVIEWED,
                        'platform_id' => $user_real_names['platform_id'],
                        'add_time'    => time()
                    ]);
                });
            } catch (\Exception $e) {
                $text = ['admin_id' => $this->getAdminUser()->id, 'stack' => $e->getTraceAsString(), 'error' => $e->getMessage()];
                $this->logger->error('开户申请审核通过失败了', $text);
            }
        } else {// 审核不通过
            $operation = '不通过';
            try {
                $result = UsersAccountApplication::transaction(function () use ($status, $user_real_names, $note, $request) {
                    //1.更新记录状态
                    UsersAccountApplication::update_all([
                        'status'    => $status,
                        'edit_time' => time(),
                        'note'      => $note,
                    ], [
                        'id' => $user_real_names['id']
                    ]);
                });
            } catch (\Exception $e) {
                $text = ['admin_id' => $this->getAdminUser()->id, 'stack' => $e->getTraceAsString(), 'error' => $e->getMessage()];
                $this->logger->error('开户申请审核不通过失败了', $text);
            }
        }

        //写入日志
        AdminOperationLog::create([
            'user_id'      => $this->getAdminUser()->id,
            'type'         => AdminOperationLog::OPERATION_REVIEW,
            'subject_type' => 'AUDIT',
            'info'         => "用户[{$this->getAdminUser()->user_name}]" . AdminOperationLog::OPERATIONS[AdminOperationLog::OPERATION_REVIEW] . $operation . "通行证为“{$user_real_names['pass']}”的开户申请",
            'ip'           => $request->getClientIp(),
            'add_time'     => date('Y-m-d H:i:s'),
            'context'      => json_encode($user_real_names, JSON_UNESCAPED_UNICODE),
        ]);

        //发送审核通过邮件或手机短信

        return ['status' => (boolean)$result, 'msg' => '操作' . ($result ? '成功' : '失败')];
    }

    /**
     * 货源审核列表
     * @Route("/audit/product-supplies", name="admin_audit_product_supplies")
     */
    public function productSuppliesAction(Request $request, Form $form) {
        $product_cate_id = $request->query->get('product_cate_id');
        if ($request->query->count() <= 2) {
            $param = [
                'product_cate_id' => $product_cate_id
            ];
            if ($product_cate_id != Constants::PRODUCT_CATE_TENCENT) {
                // 运营商类别
                $param['mvno'] = MobileNetworkOperator::all(['is_mvno' => 1, 'enabled' => 1], ['select' => 'id,short_name']);
            } else {
                $param['tencent'] = ProductTencentCategory::all([], ['select' => 'id,name']);
            }
            return $this->render("Admin/Audit/product_supplies.twig", $param);
        }
        $form->init([
            'product_cate_id' => ['integer'],
            'face_value_type' => [to_enum(ProductConstants::FACE_VALUE_TYPES)],
            'keyword'         => [''],
            'area_name'       => [''],
            'operator_id'     => ['integer'],
            'speed'           => [to_enum(ProductConstants::RECHARGE_SPEED_TYPES)],
            'sell_status'     => [to_enum(ProductConstants::SELL_STATUSES)],
            'review_status'   => [to_enum(ProductConstants::REVIEW_STATUSES)],
            'mvno'            => ['integer'],
            'start_time'      => ['date'],
            'end_time'        => ['date']
        ]);

        if (!$form->validate($request->query)) {
            return ['status' => false, 'msg' => '数据有误，请重新提交'];
        }

        $where = [
            's.sell_status'   => $form->sell_status,
            's.review_status' => $form->review_status,
            'm.product_type'  => ProductConstants::PRODUCTS_ID_TO_TYPE[$form->product_cate_id],
            's.mvno'          => $form->mvno,
        ];

        if ($form->keyword) {
            $where['m.name'] = ['LIKE' => '%' . $form->keyword . '%'];
        }

        $start_time = strtotime($form->start_time ?? date('Y-m-d'));
        $end_time   = strtotime($form->end_time ?? date('Y-m-d')) + 86399;

        if (($end_time - $start_time) > 30 * 86400) {
            return ['status' => false, 'msg' => '时间范围不允许超过30天'];
        }

        $where['s.add_time'] = ['BETWEEN' => [$start_time, $end_time]];

        $joins = ' LEFT JOIN ' . Product::table_name() . ' AS m ON m.id=s.product_id ';
        $joins .= ' LEFT JOIN ' . SourceGroup::table_name() . ' AS t ON t.id=s.template_id ';
        $joins .= ' LEFT JOIN ' . User::table_name() . ' AS u ON u.id=t.sell_user_id ';

        $options = [
            'from'  => ProductSource::table_name() . ' AS s',
            'order' => 's.id DESC',
        ];

        if (in_array($form->product_cate_id, [1, 4, 10])) {//电信、流量、固话
            $where = array_merge([
                's.face_value_type' => $form->face_value_type,
                's.speed'           => $form->speed,
                's.operator_id'     => $form->operator_id,
            ], $where);

            if ($form->area_name == 1) {//全国
                $where['s.province_code'] = 1;
            } else {
                if ($form->area_name == 2) {//省级
                    $where['s.province_code'] = array_keys(Region::PROVINCES);
                } else {
                    if ($form->area_name == 3) {//市级
                        $where['s.province_code'] = array_keys(Region::CITIES);
                    }
                }
            }

            $joins .= ' LEFT JOIN ' . MobileNetworkOperator::table_name() . ' AS im ON im.id=s.mvno ';

            $options['select'] = 's.id,u.user_name,u.nick_name,if(u.type="I",u.mobile,u.email) as pass,t.name as t_name,' .
                's.province_name,s.city_name,s.mvno,s.speed,s.num,s.face_value,s.review_status,s.sell_status,s.add_time,' .
                's.source_price,s.source_cost,s.operator_id,s.face_value_type,m.name as product_name,im.short_name as mvno_name';
        } else {
            if ($form->product_cate_id == 3) {//腾讯业务

                $options['select'] = 's.id,u.user_name,u.nick_name,if(u.type="I",u.mobile,u.email) as pass,t.name as t_name,' .
                    'm.name as product_name,s.num,m.face_value_type,m.face_value,s.source_price,s.source_cost,' .
                    's.status,s.sell_status,s.add_time';
            }
        }

        $options['joins'] = $joins;

        list($data, $total) = ProductSource::paginate($where, $options, $form->page, $form->limit);

        return ['status' => true, 'msg' => '获取成功', 'data' => $data, 'total' => $total];
    }

    /**
     * 货源审核
     * @Route("/audit/product-review", name="admin_audit_product_review")
     */
    public function productReviewAction(Request $request) {
        $source_ids = $request->request->get('id');
        $status     = $request->request->get('status');

        if (!$source_ids) {
            return ['status' => false, 'msg' => '参数有误'];
        }

        if (!array_key_exists($status, ProductSource::REVIEW_STATUSES)) {
            return ['status' => false, 'msg' => '货源状态不合法'];
        }

        $products = ProductSource::all(['id' => $source_ids]);

        if (!$products) {
            return ['status' => false, 'msg' => '未找到指定的数据'];
        }

        $count     = 0;
        $operation = AdminOperationLog::OPERATIONS[AdminOperationLog::OPERATION_REVIEW] . ($status == 1 ? '通过' : '不通过');
        foreach ($products as $product) {
            $result = false;
            try {
                $result = ProductSource::transaction(function () use ($status, $product, $operation, $request) {
                    ProductSource::update_all([
                        'review_status' => $status,
                        'edit_time'     => time(),
                    ], [
                        'id' => $product['id']
                    ]);

                    // 写入日志
                    AdminOperationLog::create([
                        'user_id'      => $this->getAdminUser()->id,
                        'type'         => AdminOperationLog::OPERATION_REVIEW,
                        'subject_type' => 'AUDIT',
                        'info'         => "用户[{$this->getAdminUser()->user_name}]" . $operation . "记录编号为“{$product['id']}”的货源审核",
                        'ip'           => $request->getClientIp(),
                        'add_time'     => date('Y-m-d H:i:s'),
                        'context'      => json_encode($product, JSON_UNESCAPED_UNICODE),
                    ]);

                    return true;
                });
            } catch (\Exception $e) {
                $text = ['admin_id' => $this->getAdminUser()->id, 'stack' => $e->getTraceAsString(), 'error' => $e->getMessage()];
                $this->logger->error('供应商货源审核失败', $text);
            }

            if ($result) {
                $count++;
            }
        }
        return ['status' => true, 'msg' => '成功操作' . $count . '项审核'];
    }

    /**
     * 货源启用/停用
     * @Route("/audit/product-change-status", name="admin_audit_product_change_status")
     */
    public function productChangeStatusAction(Request $request) {
        $source_ids      = $request->request->get('id');
        $sell_status     = $request->request->get('status');

        if (!$source_ids) {
            return ['status' => false, 'msg' => '参数有误'];
        }

        if (!array_key_exists($sell_status, ProductConstants::SETTING_ENABLE_STATUSES)) {
            return ['status' => false, 'msg' => '货源状态不合法'];
        }

        $products = ProductSource::all(['id' => $source_ids]);

        if (!$products) {
            return ['status' => false, 'msg' => '未找到指定的数据'];
        }

        $count       = 0;
        $operation   = $sell_status == 1 ? '启用' : '停止';
        $action_type = $sell_status == 1 ? AdminOperationLog::OPERATION_ENABLE : AdminOperationLog::OPERATION_DISABLE;
        foreach ($products as $product) {
            $result = false;
            try {
                $result = ProductSource::transaction(function () use ($sell_status, $product, $operation, $request, $action_type) {
                    ProductSource::update_all([
                        'sell_status' => $sell_status,
                        'edit_time'   => time(),
                    ], [
                        'id' => $product['id']
                    ]);

                    // 写入日志
                    AdminOperationLog::create([
                        'user_id'      => $this->getAdminUser()->id,
                        'type'         => $action_type,
                        'subject_type' => 'AUDIT',
                        'info'         => "用户[{$this->getAdminUser()->user_name}]" . $operation . "记录编号为“{$product['id']}”的货源",
                        'ip'           => $request->getClientIp(),
                        'add_time'     => date('Y-m-d H:i:s'),
                        'context'      => json_encode($product, JSON_UNESCAPED_UNICODE),
                    ]);

                    return true;
                });
            } catch (\Exception $e) {
                $text = ['admin_id' => $this->getAdminUser()->id, 'stack' => $e->getTraceAsString(), 'error' => $e->getMessage()];
                $this->logger->error('供应商货源' . $operation . '失败', $text);
            }

            if ($result) {
                $count++;
            }
        }
        return ['status' => true, 'msg' => '成功操作' . $count . '项'];
    }

    /**
     * 货源审核删除
     * @Route("/audit/product-supplies-del", name="admin_audit_product_supplies_del")
     */
    public function productSuppliesDelAction(Request $request) {
        $product_cate_id           = $request->query->get('product_cate_id');
        $sourceModelName           = ProductCate::get_table($product_cate_id, 'model', 'source_relation');
        $sourceLevelCelueModelName = ProductCate::get_table($product_cate_id, 'model', 'source_celue_level');
        $sourceUserCelueModelName  = ProductCate::get_table($product_cate_id, 'model', 'source_celue_user');

        $source_ids = $request->request->get('id');
        $sources    = $sourceModelName::all(['id' => $source_ids]);
        if (!$sources) {
            return ['status' => false, 'msg' => '参数有误'];
        }

        if ($product_cate_id == \App\Constants::PRODUCT_CATE_TENCENT) {
            $link_field = 'relation_id';
        } else {
            $link_field = 'source_id';
        }

        $count = 0;
        foreach ($sources as $source) {
            $result = $sourceModelName::transaction(function () use ($sourceModelName, $sourceUserCelueModelName, $sourceLevelCelueModelName, $source, $request, $link_field) {
                $sourceModelName::delete_all(['id' => $source['id']]);
                $sourceLevelCelueModelName::delete_all([$link_field => $source['id']]);
                $sourceUserCelueModelName::delete_all([$link_field => $source['id']]);

                // 写入日志
                AdminOperationLog::create([
                    'user_id'      => $this->getAdminUser()->id,
                    'type'         => AdminOperationLog::OPERATION_DELETE,
                    'subject_type' => 'AUDIT',
                    'info'         => "用户[{$this->getAdminUser()->user_name}]" . AdminOperationLog::OPERATIONS[AdminOperationLog::OPERATION_DELETE] . "记录编号为“{$source['id']}”的货源",
                    'ip'           => $request->getClientIp(),
                    'add_time'     => date('Y-m-d H:i:s'),
                    'context'      => json_encode($source, JSON_UNESCAPED_UNICODE),
                ]);
                return true;
            });
            if ($result) {
                $count++;
            }
        };

        return ['status' => true, 'msg' => $count . '项删除成功'];
    }

    /**
     * 用户提现申请审核列表
     * @Route("/audit/withdraws", name="admin_audit_withdraws")
     */
    public function withdrawsAction(Request $request, Form $form) {
        if ($request->query->count() <= 2) {
            return $this->render("Admin/Audit/withdraws.twig");
        }
        $form->init([
            'trade_status' => ['integer'],
            'keyword'      => [''],
            'start_time'   => ['date'],
            'end_time'     => ['date']
        ]);

        if (!$form->validate($request->query)) {
            return ['status' => false, 'msg' => '数据有误，请重新提交'];
        }

        $where = ['cu.trade_status' => $form->trade_status];
        if ($form->keyword) {
            //搜索暂时支持email
            $where['u.email'] = ['LIKE' => '%' . $form->keyword . '%'];
        }

        $start_time = strtotime($form->start_time ?? date('Y-m-d'));
        $end_time   = strtotime($form->end_time ?? date('Y-m-d')) + 86399;

        if ($end_time - $start_time > 30 * 86400) {
            return ['status' => false, 'msg' => '日期范围不允许超过30天'];
        }

        if ($end_time > $start_time) {
            $where['cu.add_time'] = ['BETWEEN' => [$start_time, $end_time]];
        }

        $options = [
            'select' => 'ur.legal_person_name,ur.legal_person_identity_card_no,if(u.type="I",u.mobile,u.email) as pass,u.bind_mobile,cu.*',
            'from'   => SellCashUserLog::table_name() . ' AS cu',
            'joins'  => 'LEFT JOIN ' . User::table_name() . ' AS u ON u.id=cu.user_id LEFT JOIN ' . RealNameAuthenticationInfo::table_name() . ' AS ur on ur.user_id=cu.user_id',
            'order'  => 'cu.id DESC',
        ];

        list($data, $total) = SellCashUserLog::paginate($where, $options, $form->page, $form->limit);

        return ['status' => true, 'data' => $data, 'total' => $total, 'msg' => '获取成功'];
    }

    /**
     * 用户提现申请审核
     * @Route("/audit/withdraw-review", name="admin_audit_withdraw_review")
     */
    public function withdrawReviewAction(Request $request) {
        $ids      = $request->request->get('id');
        $status   = $request->request->get('status');
        $info     = $request->request->get('platform_info');
        $password = $request->request->get('password');

        if (!$ids || !in_array($status, [SellCashUserLog::TRADE_STATUS_PROCESS, SellCashUserLog::TRADE_STATUS_REVIEW_FAIL])) {
            return ['status' => false, 'msg' => '参数有误'];
        }

        if ($password === '') {
            return ['status' => false, 'msg' => '请输入安全操作密码'];
        }

        if ($info === '') {
            return ['status' => false, 'msg' => '请输入备注'];
        }

        if (!password_verify($password, $this->getAdminUser()->password)) {
            return ['status' => false, 'msg' => '安全操作密码错误'];
        }

        $balances = SellCashUserLog::all(['id' => $ids]);

        if (empty($balances)) {
            return ['status' => false, 'msg' => '未找到指定数据'];
        }

        $count = 0;

        foreach ($balances as $balance) {
            $result = false;
            try {
                // 修改提现状态
                $result = SellCashUserLog::transaction(function () use ($status, $balance, $info, $request) {
                    SellCashUserLog::update_all([
                        'platform_info' => $info,
                        'trade_status'  => $status,
                        'edit_time'     => time()
                    ], [
                        'id' => $balance['id']
                    ]);

                    // 写入日志
                    AdminOperationLog::create([
                        'user_id'      => $this->getAdminUser()->id,
                        'type'         => AdminOperationLog::OPERATION_REVIEW,
                        'subject_type' => 'AUDIT',
                        'info'         => "用户[{$this->getAdminUser()->user_name}]" . AdminOperationLog::OPERATIONS[AdminOperationLog::OPERATION_REVIEW] . "记录编号为“{$balance['id']}”的余额提现申请",
                        'ip'           => $request->getClientIp(),
                        'add_time'     => date('Y-m-d H:i:s'),
                        'context'      => json_encode($balance, JSON_UNESCAPED_UNICODE),
                    ]);
                    return true;
                });
            } catch (\Exception $e) {
                $text = ['admin_id' => $this->getAdminUser()->id, 'stack' => $e->getTraceAsString(), 'error' => $e->getMessage()];
                $this->logger->error('供应商提现申请' . AdminOperationLog::OPERATIONS[AdminOperationLog::OPERATION_REVIEW] . '失败', $text);
            }

            if ($status !== SellCashUserLog::TRADE_STATUS_PROCESS) {//审核不通过
                $table = null;
                //扣除提现余额到可用余额
                switch ($balance['platform_id']) {
                case 1:

                    break;
                case 2:
                    $table = open_users::table_name();

                    break;
                case 3:
                    $table = sup_users::table_name();
                    break;

                case 4:

                    break;
                case 5:
                    $table = agent_users::table_name();

                    break;
                case 6:
                    break;

                case 7:
                    break;

                default:
                    break;
                }
                if (!$table) {
                    continue;
                }
                $sql = ' UPDATE `' . $table . '` SET balance = balance + ?,drawing_amount = drawing_amount - ?,edit_time = ? WHERE id = ?';

                $update = SellCashUserLog::query($sql, [$balance['get_cash'], $balance['get_cash'], time(), $balance['id']]);
            }

            if ($result && $update) {
                $count++;
            }
        }

        return ['status' => true, 'msg' => '成功' . AdminOperationLog::OPERATIONS[AdminOperationLog::OPERATION_REVIEW] . $count . '项'];
    }

    /**
     * 修改提现结果
     * @Route("/audit/edit-withdraw", name="admin_audit_edit_withdraw")
     */
    public function editWithdrawAction(Request $request) {
        $ids      = $request->request->get('id');
        $status   = $request->request->get('status');
        $info     = $request->request->get('platform_info');
        $password = $request->request->get('password');

        if (!$ids || !in_array($status, [SellCashUserLog::TRADE_STATUS_SUCCESS, SellCashUserLog::TRADE_STATUS_WITHDRAW_FAIL])) {
            return ['status' => false, 'msg' => '参数有误'];
        }

        if ($password === '') {
            return ['status' => false, 'msg' => '请输入安全操作密码'];
        }

        if ($info === '') {
            return ['status' => false, 'msg' => '请输入备注'];
        }

        if (!password_verify($password, $this->getAdminUser()->password)) {
            return ['status' => false, 'msg' => '安全操作密码错误'];
        }

        $balances = SellCashUserLog::all(['id' => $ids]);

        if (empty($balances)) {
            return ['status' => false, 'msg' => '未找到指定数据'];
        }

        $count = 0;

        foreach ($balances as $balance) {
            $result = false;
            try {
                // 修改提现状态
                $result = SellCashUserLog::transaction(function () use ($status, $balance, $info, $request) {
                    SellCashUserLog::update_all([
                        'platform_info' => $info,
                        'trade_status'  => $status,
                        'edit_time'     => time()
                    ], [
                        'id' => $balance['id']
                    ]);

                    // 写入日志
                    AdminOperationLog::create([
                        'user_id'      => $this->getAdminUser()->id,
                        'type'         => AdminOperationLog::OPERATION_EDIT,
                        'subject_type' => 'AUDIT',
                        'info'         => "用户[{$this->getAdminUser()->user_name}]" . AdminOperationLog::OPERATIONS[AdminOperationLog::OPERATION_EDIT] . "记录编号为“{$balance['id']}”的余额提现申请",
                        'ip'           => $request->getClientIp(),
                        'add_time'     => date('Y-m-d H:i:s'),
                        'context'      => json_encode($balance, JSON_UNESCAPED_UNICODE),
                    ]);
                    return true;
                });
            } catch (\Exception $e) {
                $text = ['admin_id' => $this->getAdminUser()->id, 'stack' => $e->getTraceAsString(), 'error' => $e->getMessage()];
                $this->logger->error('提现申请' . AdminOperationLog::OPERATIONS[AdminOperationLog::OPERATION_EDIT] . '失败', $text);
            }

            $table = null;
            //扣除提现余额到可用余额
            switch ($balance['platform_id']) {
            case 1:

                break;
            case 2:
                $table = open_users::table_name();

                break;
            case 3:
                $table = sup_users::table_name();
                break;

            case 4:

                break;
            case 5:
                $table = agent_users::table_name();

                break;
            case 6:
                break;

            case 7:
                break;

            default:
                break;
            }
            if (!$table) {
                continue;
            }

            if ($status == SellCashUserLog::TRADE_STATUS_WITHDRAW_FAIL) {//提现失败
                $sql = ' UPDATE `' . $table . '` SET balance = balance + ?,drawing_amount = drawing_amount - ?,edit_time = ? WHERE id = ?';

                $update = SellCashUserLog::query($sql, [$balance['get_cash'], $balance['get_cash'], time(), $balance['id']]);
            } else {
                $sql = ' UPDATE `' . $table . '` SET drawing_amount = drawing_amount - ?,edit_time = ? WHERE id = ?';

                $update = SellCashUserLog::query($sql, [$balance['get_cash'], time(), $balance['id']]);
            }

            if ($result && $update) {
                $count++;
            }
        }

        return ['status' => true, 'msg' => '成功' . AdminOperationLog::OPERATIONS[AdminOperationLog::OPERATION_EDIT] . $count . '项'];
    }

    /**
     * 用户提现帐户审核列表
     * @Route("/audit/withdraw-accounts", name="admin_audit_withdraws_accounts")
     */
    public function withdrawAccountsAction(Request $request, Form $form) {
        if ($request->query->count() <= 2) {
            return $this->render("Admin/Audit/withdraw_accounts.twig");
        }
        $form->init([
            'verify_status' => ['integer'],
            'keyword'       => [''],
            'start_time'    => ['date'],
            'end_time'      => ['date'],
        ]);

        if (!$form->validate($request->query)) {
            return ['status' => false, 'msg' => '数据有误，请重新提交'];
        }

        $where = ['cua.verify_status' => $form->verify_status];

        if ($form->keyword) {
            //搜索暂时支持email
            $where['u.email'] = ['LIKE' => '%' . $form->keyword . '%'];
        }

        $start_time = strtotime($form->start_time ?? date('Y-m-d'));
        $end_time   = strtotime($form->end_time ?? date('Y-m-d')) + 86399;

        if ($end_time - $start_time > 30 * 86400) {
            return ['status' => false, 'msg' => '日期范围不允许超过30天'];
        }

        if ($end_time > $start_time) {
            $where['cua.add_time'] = ['BETWEEN' => [$start_time, $end_time]];
        }

        $options = [
            'select' => 'ur.legal_person_name,ur.legal_person_identity_card_no,if(u.type="I",u.mobile,u.email) as pass,u.bind_mobile,cua.*',
            'from'   => CashUserAccount::table_name() . ' AS cua',
            'joins'  => 'LEFT JOIN ' . User::table_name() . ' AS u ON u.id=cua.user_id LEFT JOIN ' . RealNameAuthenticationInfo::table_name() . ' AS ur on ur.user_id=cua.user_id',
            'order'  => 'cua.id DESC',
        ];

        list($data, $total) = CashUserAccount::paginate($where, $options, $form->page, $form->limit);

        return ['status' => true, 'data' => $data, 'total' => $total, 'msg' => '获取成功'];
    }

    /**
     * 用户提现帐户审核
     * @Route("/audit/withdraw-accounts-review", name="admin_audit_withdraw_accounts_review")
     */
    public function withdrawAccountsReviewAction(Request $request, Form $form) {
        $ids    = $request->request->get('id');
        $status = $request->request->get('status');

        if (!$ids || !in_array($status, [CashUserAccount::VERIFY_STATUS_SUCCESS, CashUserAccount::VERIFY_STATUS_FAIL])) {
            return ['status' => false, 'msg' => '参数有误'];
        }

        $accounts = CashUserAccount::all(['id' => $ids]);

        if (empty($accounts)) {
            return ['status' => false, 'msg' => '未找到指定数据'];
        }

        $count = 0;

        foreach ($accounts as $account) {
            $result = false;
            try {
                // 修改提现状态
                $result = CashUserAccount::transaction(function () use ($status, $account, $request) {
                    CashUserAccount::update_all([
                        'verify_status' => $status,
                        'edit_time'     => time()
                    ], [
                        'id' => $account['id']
                    ]);

                    // 写入日志
                    AdminOperationLog::create([
                        'user_id'      => $this->getAdminUser()->id,
                        'type'         => AdminOperationLog::OPERATION_REVIEW,
                        'subject_type' => 'AUDIT',
                        'info'         => "用户[{$this->getAdminUser()->user_name}]" . AdminOperationLog::OPERATIONS[AdminOperationLog::OPERATION_REVIEW] . "记录编号为“{$account['id']}”的余额提现账户申请",
                        'ip'           => $request->getClientIp(),
                        'add_time'     => date('Y-m-d H:i:s'),
                        'context'      => json_encode($account, JSON_UNESCAPED_UNICODE),
                    ]);
                    return true;
                });
            } catch (\Exception $e) {
                $text = ['admin_id' => $this->getAdminUser()->id, 'stack' => $e->getTraceAsString(), 'error' => $e->getMessage()];
                $this->logger->error('总管理后台提现账户申请' . AdminOperationLog::OPERATIONS[AdminOperationLog::OPERATION_REVIEW] . '失败', $text);
            }

            if ($result) {
                $count++;
            }
        }

        return ['status' => true, 'msg' => '成功' . AdminOperationLog::OPERATIONS[AdminOperationLog::OPERATION_REVIEW] . $count . '项'];
    }

    /**
     * 用户提现帐户审核删除
     * @Route("/audit/del-withdraw-accounts", name="admin_audit_del_withdraw_accounts")
     */
    public function delWithdrawAccountsAction(Request $request, Form $form) {
        $ids = $request->request->get('id');

        if (!$ids) {
            return ['status' => false, 'msg' => '参数有误'];
        }

        $accounts = CashUserAccount::all(['id' => $ids, 'verify_status' => CashUserAccount::VERIFY_STATUS_FAIL]);

        if (empty($accounts)) {
            return ['status' => false, 'msg' => '未找到指定数据'];
        }

        $count = 0;

        foreach ($accounts as $account) {
            $result = false;
            try {
                $result = CashUserAccount::transaction(function () use ($account, $request) {
                    CashUserAccount::delete_by_id($account['id']);

                    // 写入日志
                    AdminOperationLog::create([
                        'user_id'      => $this->getAdminUser()->id,
                        'type'         => AdminOperationLog::OPERATION_DELETE,
                        'subject_type' => 'AUDIT',
                        'info'         => "用户[{$this->getAdminUser()->user_name}]" . AdminOperationLog::OPERATIONS[AdminOperationLog::OPERATION_DELETE] . "记录编号为“{$account['id']}”的余额提现账户申请",
                        'ip'           => $request->getClientIp(),
                        'add_time'     => date('Y-m-d H:i:s'),
                        'context'      => json_encode($account, JSON_UNESCAPED_UNICODE),
                    ]);
                    return true;
                });
            } catch (\Exception $e) {
                $text = ['admin_id' => $this->getAdminUser()->id, 'stack' => $e->getTraceAsString(), 'error' => $e->getMessage()];
                $this->logger->error('总管理后台提现账户申请' . AdminOperationLog::OPERATIONS[AdminOperationLog::OPERATION_DELETE] . '失败', $text);
            }

            if ($result) {
                $count++;
            }
        }

        return ['status' => true, 'msg' => '成功' . AdminOperationLog::OPERATIONS[AdminOperationLog::OPERATION_DELETE] . $count . '项'];
    }

}
