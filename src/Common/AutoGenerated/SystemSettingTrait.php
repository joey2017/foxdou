<?php
namespace App\Common\AutoGenerated;

class SystemSettingSection {
    protected $attributes      = [];
    protected $dirtyAttributes = [];

    public function __isset ($key) {
        return isset($this->attributes[$key]);
    }

    public function __get($key) {
        if(!isset($this->attributes[$key])) {
            throw new \InvalidArgumentException("无此设置项：" . static::SECTION_KEY . ".${key}");
        }

        return $this->attributes[$key];
    }

    public function __set($key, $value) {
        if(!isset($this->attributes[$key])) {
            throw new \InvalidArgumentException("无此设置项：" . static::SECTION_KEY . ".${key}");
        }

        if($this->attributes[$key] !== $value) {
            $this->attributes[$key] = $value;
            $this->dirtyAttributes[$key] = $value;
        }
    }
    
    public function getDirtyAttributes() {
        return $this->dirtyAttributes;
    }
    
    public function all() {
        return $this->attributes;
    }
}

/**
  * @property string $site_name
  * @property string $beian_info
  * @property bool $maintenance_mode
  * @property string $maintenance_note
 */
class SystemSettingSection_system extends SystemSettingSection {
    const SECTION_KEY = 'system';
    protected $attributes = array (
  'site_name' => '狐豆',
  'beian_info' => '',
  'maintenance_mode' => false,
  'maintenance_note' => '系统维护中，暂时无法访问，请稍候再来。',
);

}

/**
  * @property integer $individual_requires_identity
  * @property integer $individual_activation_method
  * @property integer $individual_identity_verify_method
  * @property integer $individual_open_platform_create_account_method
  * @property integer $individual_reseller_platform_create_account_method
  * @property integer $individual_supplier_platform_create_account_method
  * @property integer $business_activation_method
  * @property integer $business_identity_verify_method
  * @property integer $business_open_platform_create_account_method
  * @property integer $business_reseller_platform_create_account_method
  * @property integer $business_supplier_platform_create_account_method
  * @property integer $max_password_errors_per_day
  * @property integer $suspend_period
 */
class SystemSettingSection_passport extends SystemSettingSection {
    const SECTION_KEY = 'passport';
    protected $attributes = array (
  'individual_requires_identity' => 1,
  'individual_activation_method' => 1,
  'individual_identity_verify_method' => 1,
  'individual_open_platform_create_account_method' => 1,
  'individual_reseller_platform_create_account_method' => 1,
  'individual_supplier_platform_create_account_method' => 1,
  'business_activation_method' => 1,
  'business_identity_verify_method' => 1,
  'business_open_platform_create_account_method' => 1,
  'business_reseller_platform_create_account_method' => 1,
  'business_supplier_platform_create_account_method' => 1,
  'max_password_errors_per_day' => 10,
  'suspend_period' => 2,
);

}

/**
  * @property integer $max_withdraw_times_per_day
  * @property float $min_withdraw_amount
  * @property float $max_withdraw_amount
  * @property integer $invite_employee_expires_time
  * @property bool $allow_place_order_with_null_source
 */
class SystemSettingSection_reseller_platform extends SystemSettingSection {
    const SECTION_KEY = 'reseller_platform';
    protected $attributes = array (
  'max_withdraw_times_per_day' => 10,
  'min_withdraw_amount' => 1000,
  'max_withdraw_amount' => 10000,
  'invite_employee_expires_time' => 72,
  'allow_place_order_with_null_source' => false,
);

}

/**
  * @property integer $deposit_amount
  * @property integer $min_deposit_amount
  * @property integer $withdraw_fee_rate_type
  * @property float $withdraw_fee_rate_percent
  * @property float $withdraw_fee_rate_fixed
  * @property integer $max_withdraw_times_per_day
  * @property float $min_withdraw_amount
  * @property float $max_withdraw_amount
  * @property integer $invite_employee_expires_time
 */
class SystemSettingSection_supplier_platform extends SystemSettingSection {
    const SECTION_KEY = 'supplier_platform';
    protected $attributes = array (
  'deposit_amount' => 5000,
  'min_deposit_amount' => 4000,
  'withdraw_fee_rate_type' => 2,
  'withdraw_fee_rate_percent' => 0.006,
  'withdraw_fee_rate_fixed' => 1,
  'max_withdraw_times_per_day' => 10,
  'min_withdraw_amount' => 1000,
  'max_withdraw_amount' => 10000,
  'invite_employee_expires_time' => 72,
);

}

/**
  * @property \App\Common\AutoGenerated\SystemSettingSection_system $system
  * @property \App\Common\AutoGenerated\SystemSettingSection_passport $passport
  * @property \App\Common\AutoGenerated\SystemSettingSection_reseller_platform $reseller_platform
  * @property \App\Common\AutoGenerated\SystemSettingSection_supplier_platform $supplier_platform
 */
Trait SystemSettingTrait {
    protected $initialized = false;
    protected $sections = [];
    

    protected function initializeInternal() {
        if($this->initialized) {
            return;
        }

        $this->sections['system'] = new SystemSettingSection_system();
        $this->sections['passport'] = new SystemSettingSection_passport();
        $this->sections['reseller_platform'] = new SystemSettingSection_reseller_platform();
        $this->sections['supplier_platform'] = new SystemSettingSection_supplier_platform();

        $this->initialized = true;
    }


    public function initialize() {
        $this->initializeInternal();
    }

    public function __isset ($key) {
        if(!$this->initialized) {
            $this->initialize();
        }
        return isset($this->sections[$key]);
    }

    public function __get($key) {
        if(!$this->initialized) {
            $this->initialize();
        }

        if(!isset($this->sections[$key])) {
            throw new \InvalidArgumentException("无此设置项：{$key}");
        }

        return $this->sections[$key];
    }

    public function __set($key, $value) {
        throw new \InvalidArgumentException("只读属性，不支持写入");
    }

    public function isChanged() {
        /** @var SystemSettingSection $section */
        foreach ($this->sections as $sectionKey => $section) {
            if($section->getDirtyAttributes()) {
                return true;
            }
        }
        
        return false;
    }
    
    public function getChanges() {
        $dirtyAttributes = [];
        /** @var SystemSettingSection $section */
        foreach ($this->sections as $sectionKey => $section) {
            $attributes = $section->getDirtyAttributes();
            if($attributes) {
                $dirtyAttributes[$sectionKey] = $attributes;
            }
        }

        return $dirtyAttributes;
    }
    
    public function all() {
        $allSettings = [];
        /** @var SystemSettingSection $section */
        foreach ($this->sections as $sectionKey => $section) {
            $allSettings[$sectionKey] = $section->all();
        }

        return $allSettings;
    }

    public function load() {
        throw new \RuntimeException("You need to implement this method in you sub class");
    }

    public function save($saveAll = false) {
        throw new \RuntimeException("You need to implement this method in you sub class");
    }

    function jsonSerialize() {
        return $this->all();
    }

    public function serialize() {
        return json_encode($this->all());
    }
    
    public function unserialize($serialized) {
        $data = json_decode($serialized, true);
        $this->loadFromArray($data);
    }

    public function loadFromArray(array $data) {
        if(!$this->initialized) {
            $this->initialize();
        }
        foreach ($data as $sectionKey => $keyValues) {
            $section = $this->sections[$sectionKey];
            foreach ($keyValues as $key => $value) {
                $section->$key = $value;
            }
            $this->sections[$sectionKey] = $section;
        }
    }
}

