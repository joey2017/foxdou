<?php

namespace App\Common\Model\Order;

use App\Common\Model\AutoGenerated\order_recharge;
use App\Common\Model\Payment\UserMoneyLog;
use App\Common\Model\Product\Product;
use App\Common\Model\User\OpenPlatformAccount;
use App\Common\Model\User\ResellerAccount;
use App\Common\Model\User\SubAccount;
use App\Common\Model\User\User;
use App\Platform;

class OrderRecharge extends order_recharge {

    //订单状态
    // const STATUS_NEW             = 'NEW';   //新建  （原本叫做未知）
    const STATUS_PROCESSING      = 'PROCESSING';//充值中
    const STATUS_SUCCEED_SYS     = 'SUCCEED_SYS';//充值成功（系统）
    const STATUS_FAILED_SYS      = 'FAILED_SYS';//充值失败（系统）
    const STATUS_PENDING_PAYMENT = 'PENDING_PAYMENT';//待付款
    // const STATUS_CANCELED        = 'CANCELED';//已取消
    const STATUS_SUCCEED_MAN = 'SUCCEED_MAN';//充值成功（人工）
    const STATUS_FAILED_MAN  = 'FAILED_MAN';//充值失败（人工）

    const STATUSES = [
        //暂时隐藏三项状态
        //self::STATUS_NEW       => '新订单',
        self::STATUS_PROCESSING  => '充值中',
        self::STATUS_SUCCEED_SYS => '充值成功（系统）',
        self::STATUS_SUCCEED_MAN => '充值成功（人工）',
        //self::STATUS_PENDING_PAYMENT => '待付款',
        //self::STATUS_CANCELED        => '已取消',
        self::STATUS_FAILED_SYS  => '充值失败（系统）',
        self::STATUS_FAILED_MAN  => '充值失败（人工）',
    ];

    const STATUS_TRANSITIONS = [
        // self::STATUS_NEW             => [self::STATUS_PENDING_PAYMENT, self::STATUS_PROCESSING],
        self::STATUS_PENDING_PAYMENT => [self::STATUS_PROCESSING,],
        self::STATUS_PROCESSING      => [self::STATUS_SUCCEED_SYS, self::STATUS_FAILED_SYS, self::STATUS_SUCCEED_MAN, self::STATUS_SUCCEED_MAN],
        self::STATUS_SUCCEED_SYS     => [self::STATUS_FAILED_MAN,],
        self::STATUS_SUCCEED_MAN     => [self::STATUS_FAILED_MAN,],
        self::STATUS_FAILED_SYS      => [self::STATUS_SUCCEED_MAN,],
        self::STATUS_FAILED_MAN      => [self::STATUS_SUCCEED_MAN,],

    ];

    //向用户展示的订单状态
    const SHOW_USER_STATUSES = [
        //充值成功（系统）
        self::STATUS_SUCCEED_SYS => '充值成功',
        //充值成功（人工）
        self::STATUS_SUCCEED_MAN => '充值成功',
        //充值失败（系统）
        self::STATUS_FAILED_SYS  => '充值失败',
        //充值失败（人工）
        self::STATUS_FAILED_MAN  => '充值失败',
    ];

    const USER_STATUSES = [
        // self::STATUS_NEW             => '新建',
        self::STATUS_PROCESSING                                   => '充值中',
        self::STATUS_SUCCEED_SYS . ',' . self::STATUS_SUCCEED_MAN => '充值成功',
        self::STATUS_FAILED_SYS . ',' . self::STATUS_FAILED_MAN   => '充值失败',
        //self::STATUS_PENDING_PAYMENT                                  => '待付款',
    ];

    //结算状态
    // const SETTLEMENT_PENDING         = 0;// 未扣款
    const SETTLEMENT_PAID   = 'PAID';// 已扣款
    const SETTLEMENT_REFUND = 'REFUND';// 已退款

    const SETTLEMENT = [
        self::SETTLEMENT_PAID   => '已扣款',
        self::SETTLEMENT_REFUND => '已退款',
    ];

    const SETTLEMENT_STATUS_TRANSITIONS = [
        self::SETTLEMENT_PAID   => [self::SETTLEMENT_REFUND],
        self::SETTLEMENT_REFUND => [self::SETTLEMENT_PAID],
    ];

    //订单标记状态
    const MARK_NORMAL             = 'NORMAL';//正常
    const MARK_OVERTIME           = 'OVERTIME';//超时2分钟
    const MARK_CARD               = 'CARD';//卡单
    const MARK_PENDING_PROCESSING = 'PENDING_PROCESSING';//待人工处理
    const MARK_FAIL               = 'FAIL';//失败可疑

    const MARKS = [
        self::MARK_NORMAL             => '正常',
        self::MARK_OVERTIME           => '超时2分钟',
        self::MARK_CARD               => '卡单',
        self::MARK_PENDING_PROCESSING => '待人工处理',
        self::MARK_FAIL               => '失败可疑'
    ];

    public static function newId($prefix = '') {
        $date      = date('ymdHis'); // 181212123456123456
        $shortUuid = parent::newShortUuid();
        $shortUuid = substr($shortUuid, -6);
        return "C{$date}{$shortUuid}";// C181212123456123456
    }

    public function set_status($new_status) {
        $map = self::STATUS_TRANSITIONS[$this->status] ?? [];
        if(!in_array($new_status, $map)) {
            throw new \InvalidArgumentException(sprintf('当前订单状态 [%s] 不能变化为状态 [%s]', $this->status, $new_status));
        }

        $this->assign_attribute('status', $new_status);
        $this->last_recharge_status_time = time();
    }

    public function set_settlement_status($new_settlement_status) {
        $map = self::SETTLEMENT_STATUS_TRANSITIONS[$this->settlement_status] ?? [];
        if(!in_array($new_settlement_status, $map)) {
            throw new \InvalidArgumentException(sprintf('当前订单结算状态 [%s] 不能变化为状态 [%s]', $this->settlement_status, $new_settlement_status));
        }

        $this->assign_attribute('settlement_status', $new_settlement_status);

    }

    /** @var Product $product */
    private $product = false; // 此充值主订单对应的商品

    public function getProduct() {
        if ($this->product === false) {
            $this->product = Product::find($this->product_id);
        }

        return $this->product;
    }

    /** @var User $user */
    private $user = false; // 此订单对应的用户

    /** 此订单对应的用户
     * @return User|null
     */
    public function getUser() {
        if ($this->user === false) {
            $this->user = User::find($this->user_id);
        }

        return $this->user;
    }


    /** @var SubAccount $subAccount */
    private $subAccount = false; // 此订单对应的用户

    /** 此订单对应的用户在本订单所在平台的平台子账号
     * @return SubAccount|null
     */
    public function getPlatformAccount() {
        if ($this->subAccount === false) {
            if($this->platform_id === Platform::OPEN_PLATFORM) {
                $this->subAccount = OpenPlatformAccount::find($this->user_id);
            } elseif($this->platform_id === Platform::RESELLER) {
                $this->subAccount = ResellerAccount::find($this->user_id);
            } else {
                throw new \RuntimeException('暂时还不支持该平台：' . $this->platform_id);
            }
        }

        return $this->subAccount;
    }

    /** @var OrderRechargeSup $order */
    private $currentSupOrder = false; // 此充值主订单当前关联的 Sup 订单

    public function getCurrentSupOrder() {
        if ($this->currentSupOrder === false) {
            $this->currentSupOrder = OrderRechargeSup::find($this->current_sup_order_id);
            $this->currentSupOrder->setOrder($this);
        }

        return $this->currentSupOrder;
    }
    /**
     * @param OrderRechargeSup $currentSupOrder
     */
    public function setCurrentSupOrder(OrderRechargeSup $currentSupOrder): void {
        $this->current_sup_order_id = $currentSupOrder->id;
        $this->currentSupOrder = $currentSupOrder;
    }

    /** @var OrderRechargeSup[] $allSupOrders */
    private $allSupOrders = false; // 此充值主订单当前关联的 Sup 订单

    public function allSupOrders() {
        if ($this->allSupOrders === false) {
            $this->allSupOrders = OrderRechargeSup::all(['order_id' => $this->id], ['hydrate' => true]);
        }

        return $this->allSupOrders;
    }

    public function export($charset = 'GB18030') {
        $curEncoding   = mb_internal_encoding();
        $formatedAttrs = $this->to_array();
        foreach ($formatedAttrs as $field => &$value) {
            if ($field === 'status') {
                $value = self::USER_STATUSES[$value] ?? "未知 ({$value})";
            }

            if ($curEncoding !== $charset) {
                $value = mb_convert_encoding($value, $charset);
            }
        }

        return $formatedAttrs;
    }

    public function isSettled() {
        $lastLog = UserMoneyLog::last(['order_id' => $this->id, 'platform_id' => $this->platform_id, 'user_id' => $this->user_id]);
        return $lastLog->log_type === UserMoneyLog::TYPE_ORDER_SETTLEMENT;
    }

    public function isRefunded() {
        $lastLog = UserMoneyLog::last(['order_id' => $this->id, 'platform_id' => $this->platform_id, 'user_id' => $this->user_id]);
        return $lastLog->log_type === UserMoneyLog::TYPE_REFUND;
    }

}
