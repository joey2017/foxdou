<?php

namespace App\Common\Model\Payment;

use App\Common\Model\AutoGenerated\user_money_log;
use App\Common\Model\BaseModel;
use App\Common\Model\User\SubAccount;
use Psr\Log\LoggerInterface;

class UserMoneyLog extends user_money_log {

//    const TYPE_UNKNOWN          = 0; //未知   没必要设定一个未知 类型，因为所有没定义的都是属于未知 类型
    const TYPE_ORDER_PAYMENT    = 1; //订单支付
    const TYPE_WITHDRAW         = 2; //提现
    const TYPE_ADD_BALANCE      = 3; //余额充值
    const TYPE_REFUND           = 4; //退款
    const TYPE_ORDER_SETTLEMENT = 5; //订单结算
    const TYPE_TRANSFER         = 6; //转账
    const TYPE_BROKERAGE        = 7; //佣金提现（只有代理商平台才有）
    const TYPE_DEDUCTIONS       = 8; //失败扣款

    const LOG_TYPES = [
//        self::TYPE_UNKNOWN          => '未知',
        self::TYPE_ORDER_PAYMENT    => '订单支付',
        self::TYPE_WITHDRAW         => '提现',
        self::TYPE_ADD_BALANCE      => '余额充值',
        self::TYPE_REFUND           => '退款',
        self::TYPE_ORDER_SETTLEMENT => '订单结算',
        self::TYPE_TRANSFER         => '转账',
        self::TYPE_BROKERAGE        => '佣金提现',//（只有代理商平台才有）
        self::TYPE_DEDUCTIONS       => '失败扣款',
    ];

    /**
     * @param SubAccount           $userSubAccount
     * @param                      $amount
     * @param                      $name
     * @param                      $note
     * @param                      $logType
     * @param null                 $orderId
     * @param null                 $tradeLogId
     * @param LoggerInterface|null $logger
     * @param array                $context
     * @return UserMoneyLog
     * @throws \Exception
     */
    public static function createLog(SubAccount $userSubAccount, $orderId, $amount, $logType, $name = '', $note = '', $tradeLogId = null, LoggerInterface $logger = null, $context = []) {
        $log = new UserMoneyLog([
            'platform_id'            => $userSubAccount->getPlatformId(),
            'user_id'                => $userSubAccount->user_id,
            'order_id'               => $orderId,
            'amount'                 => $amount,
            'name'                   => $name,
            'log_type'               => $logType,
            'note'                   => $note,
            'trade_id'               => $tradeLogId,
            'current_balance'        => $userSubAccount->balance,
            // 'platform_total_balance' => $userSubAccount::sum('balance'), // WTF: 每笔订单都要计算一次所有用户余额总额，可能会影响性能，是否可以去掉？
            'add_time'               => time(),
        ]);

        try {
            $log->save();
        } catch (\Exception $e) {
            $logger->error('创建用户资金记录失败',  array_merge($context, ['money_log' => $log->to_array()]));
            throw $e;
        }

        return $log;
    }

    public function export($charset = 'GB18030') {
        $curEncoding = mb_internal_encoding();
        $formatedAttrs = $this->to_array();
        foreach ($formatedAttrs as $field => &$value) {
            if($field === 'log_type') {
                $value = self::LOG_TYPES[$value] ?? "未知 ({$value})";
            } elseif($field === 'trade_id' || $field == 'order_id') {
                $value = "=\"{$value}\"";
            } elseif($field === 'amount' || $field === 'current_balance') {
                $value = number_format($value, 2);
            } elseif($field === 'add_time') {
                $value = date('Y-m-d H:i:s', $value);
            }

            if($curEncoding !== $charset) {
                $value = mb_convert_encoding($value, $charset);
            }
        }

        return $formatedAttrs;
    }


    public function exportHeaders($charset = 'GB18030') {
        $curEncoding = mb_internal_encoding();
        $formatedAttrs = $this->to_array();

        foreach ($formatedAttrs as $field => &$value) {
            if($field == 'log_type') {
                $value = self::LOG_TYPES[$value] ?? "未知 ({$value})";
            } elseif($field == 'trade_id' || $field == 'order_id') {
                $value = "=\"{$value}\"";
            }

            if($curEncoding !== $charset) {
                $value = mb_convert_encoding($value, $charset);
            }
        }

        return $formatedAttrs;
    }

    public static function getLogTypeText($log_type) {
        return self::LOG_TYPES[$log_type] ?? "未知 ({$log_type})";
    }

}
