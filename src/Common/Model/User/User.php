<?php

namespace App\Common\Model\User;

use App\Common\Model\AutoGenerated\users;
use App\Platform;
use Symfony\Component\Security\Core\User\UserInterface;

class User extends users implements UserInterface, \Serializable {

    static $table_name = 'yzb_users';

    static $has_one = [
        //['real_name_info', ['class_name' => '\App\Common\Model\User\RealNameAuthenticationInfo']],
        ['real_name_info', ['class_name' => '\App\Common\Model\User\UserIdentity']],
        ['contact_info', ['class_name' => '\App\Common\Model\User\ContactInfo']],
    ];

    static $before_save = [
        'updateUserStatus'
    ];

    //账号类型
    const TYPE_INDIVIDUAL = 'I'; // INDIVIDUAL
    const TYPE_BUSINESS   = 'B'; // BUSINESS
    // const TYPE_ENTERPRISE = 'E'; // ENTERPRISE

    const TYPES = [
        self::TYPE_INDIVIDUAL => '个人',
        self::TYPE_BUSINESS   => '公司',
        // self::TYPE_ENTERPRISE => '企业',
    ];

    const BUSINESS_TYPE_MIN_YING = 1;
    const BUSINESS_TYPE_         = 2;
    const BUSINESS_TYPE_LTD      = 3;
    const BUSINESS_TYPE_INC      = 4;
    const BUSINESS_TYPE_SAN_ZI   = 5;
    const BUSINESS_TYPE_JI_TI    = 6;
    const BUSINESS_TYPE_ZWHZ     = 7;
    const BUSINESS_TYPE_GUO_YOU  = 8;
    const BUSINESS_TYPE_SHI_YE   = 9;

    const BUSINESS_TYPES = [
        self::BUSINESS_TYPE_MIN_YING => '民营企业',
        self::BUSINESS_TYPE_         => '个体经营',
        self::BUSINESS_TYPE_LTD      => '有限责任公司',
        self::BUSINESS_TYPE_INC      => '股份制公司',
        self::BUSINESS_TYPE_SAN_ZI   => '三资企业',
        self::BUSINESS_TYPE_JI_TI    => '集体企业',
        self::BUSINESS_TYPE_ZWHZ     => '中外合资企业',
        self::BUSINESS_TYPE_GUO_YOU  => '国有单位',
        self::BUSINESS_TYPE_SHI_YE   => '事业单位',
    ];

    // 余额支付状态
    const PAY_STATUS_DISABLED = 'N';  // 禁用
    const PAY_STATUS_ENABLED  = 'Y';  // 开启

    const PAY_STATUSES = [
        self::PAY_STATUS_DISABLED => '禁用',   // 禁用
        self::PAY_STATUS_ENABLED  => '开启',   // 开启
    ];

    // 账号状态
    const STATUS_INACTIVE  = 'INACTIVE';    // 未激活
    const STATUS_ACTIVE    = 'ACTIVE';      // 正常
    const STATUS_REVIEWING = 'REVIEWING';   // 待审核
    const STATUS_SUSPENDED = 'SUSPENDED';   // 被冻结
    const STATUS_BANNED    = 'BANNED';      // 被清退

    const STATUSES = [
        self::STATUS_ACTIVE    => '正常',       // 正常
        self::STATUS_INACTIVE  => '未激活',     // 未激活
        self::STATUS_REVIEWING => '待审核',     // 待审核
        self::STATUS_SUSPENDED => '被冻结',     // 被冻结
        self::STATUS_BANNED    => '被清退',     // 被清退
    ];

    // 身份写入状态
    const IDENTITY_STATUS_NO  = 'N'; // 未写入
    const IDENTITY_STATUS_YES = 'Y'; // 已写入

    const IDENTITY_STATUS = [
        self::IDENTITY_STATUS_NO  => '未写入',
        self::IDENTITY_STATUS_YES => '已写入'
    ];

    // 开放平台开通状态
    const OPENPLATFORM_STATUS_NO  = 'N'; // 未开通
    const OPENPLATFORM_STATUS_YES = 'Y'; // 已开通

    const OPENPLATFORM_STATUS = [
        self::OPENPLATFORM_STATUS_NO  => '未开通',
        self::OPENPLATFORM_STATUS_YES => '已开通'
    ];

    // 代理商平台开通状态
    const AGENTPLATFORM_STATUS_NO  = 'N'; // 未开通
    const AGENTPLATFORM_STATUS_YES = 'Y'; // 已开通

    const AGENTPLATFORM_STATUS = [
        self::AGENTPLATFORM_STATUS_NO  => '未开通',
        self::AGENTPLATFORM_STATUS_YES => '已开通'
    ];

    // 供应商平台开通状态
    const SUPPLIERPLATFORM_STATUS_NO  = 'N'; // 未开通
    const SUPPLIERPLATFORM_STATUS_YES = 'Y'; // 已开通

    const SUPPLIERPLATFORM_STATUS = [
        self::SUPPLIERPLATFORM_STATUS_NO  => '未开通',
        self::SUPPLIERPLATFORM_STATUS_YES => '已开通'
    ];

    // 狐豆靓号分配状态
    const ASSIGN_STATUS_NO  = 'N'; // 未分配
    const ASSIGN_STATUS_YES = 'Y'; // 已分配

    const ASSIGN_STATUS = [
        self::ASSIGN_STATUS_NO  => '未分配',
        self::ASSIGN_STATUS_YES => '已分配'
    ];

    const MAX_LOGIN_FAIL_NUM     = 10;
    const PASSWORD_FAIL_WARN_NUM = 3;

    const MAX_PAY_FAIL_NUM           = 10;
    const PAY_PASSWORD_FAIL_WARN_NUM = 3;

    const ROLE_SUPER_ADMIN   = 'ROLE_SUPER_ADMIN';
    const ROLE_ADMIN         = 'ROLE_ADMIN';
    const ROLE_RESELLER      = 'ROLE_RESELLER';
    const ROLE_OPEN_PLATFORM = 'ROLE_OPEN_PLATFORM';
    const ROLE_SUPPLIER      = 'ROLE_SUPPLIER';
    const ROLE_USER          = 'ROLE_USER';

    private $roleList = [];

    public function set_password($password) {
        $this->assign_attribute('password', password_hash($password, PASSWORD_BCRYPT));
    }

    public function set_pay_password($pay_password) {
        $this->assign_attribute('pay_password', password_hash($pay_password, PASSWORD_BCRYPT));
    }

    public function updateUserStatus() {
        $status = $this->status;
        if ($this->type === self::TYPE_BUSINESS && !$this->email_verified) {
            $status = self::STATUS_REVIEWING;
        }
        // $this->status = $status;
    }

    public function isValid() {
        if ($this->status != self::STATUS_ACTIVE) {
            return false;
        }

        if ($this->type === self::TYPE_BUSINESS && !$this->email_verified) {
            return false;
        }

        return true;
    }

    public function allowLogin() {
        if (!$this->isValid()) {
            return false;
        }

        if ($this->password_error_num >= self::MAX_LOGIN_FAIL_NUM) {
            return false;
        }

        return true;
    }

    public function getDisplayName() {
        return $this->nick_name ?: $this->user_name;
    }

    public function getMobile($masked = false) {
        $mobileNumber = $this->mobile;
        if ($mobileNumber && $masked) {
            $mobileNumber = substr($mobileNumber, 0, 3) . "****" . substr($mobileNumber, -4);
        }

        return $mobileNumber;
    }

    public function getEmail($masked = false) {
        $email = $this->email;
        if ($email && $masked) {
            $email = substr($email, 0, 3) . "****" . substr($email, -4);
        }

        return $email;
    }

    public function getSubAccount(int $platformId, bool $throwException = true): ?SubAccount {
        $supportedPlatforms = [Platform::OPEN_PLATFORM, Platform::RESELLER, Platform::SUPPLIER];
        if (!in_array($platformId, $supportedPlatforms)) {
            if ($throwException) {
                throw new \InvalidArgumentException('非法参数');
            } else {
                return null;
            }
        }

        $subAccount = null;
        if ($platformId === Platform::OPEN_PLATFORM) {
            $subAccount = $this->getOpenPlatformAccount();
        } elseif ($platformId === Platform::RESELLER) {
            $subAccount = $this->getResellerAccount();
        } elseif ($platformId === Platform::SUPPLIER) {
            $subAccount = $this->getSupplierAccount();
        } else {
            // 不会运行到这里的
            throw new \InvalidArgumentException('非法参数');
        }

        return $subAccount;
    }

    public function getOpenPlatformAccount(): ?OpenPlatformAccount {
        static $account = false;
        if ($account === false) {
            $account = OpenPlatformAccount::first(['user_id' => $this->id]);
        }
        return $account;
    }

    public function getResellerAccount(): ?ResellerAccount {
        static $account = false;
        if ($account === false) {
            $account = ResellerAccount::first(['user_id' => $this->id]);
        }
        return $account;
    }

    public function getSupplierAccount(): ?SupplierAccount {
        static $account = false;
        if ($account === false) {
            $account = SupplierAccount::first(['user_id' => $this->id]);
        }
        return $account;
    }

    public function getRealNameInfo(): ?UserIdentity {
        return UserIdentity::first(['user_id' => $this->id]);
    }

    public function getIdentity($create = false): ?UserIdentity {
        static $userIdentity = false;
        if ($userIdentity === false) {
            $userIdentity = UserIdentity::first(['user_id' => $this->id]);
        }

        if (!$userIdentity && $create) {
            $userIdentity          = new UserIdentity();
            $userIdentity->user_id = $this->id;
            $userIdentity->status  = UserIdentity::STATUS_NEW;
            $userIdentity->save(true, true);
        }

        return $userIdentity;
    }

    public function getContactInfo(): ?ContactInfo {
        return ContactInfo::first(['user_id' => $this->id]);
    }

    public function getRealNameStatusText() {
        return UserIdentity::STATUSES[$this->real_name_status] ?? "-";
    }

    public function getTypeText() {
        return self::TYPES[$this->type] ?? "未知";
    }

    public function getUsername(): string {
        return $this->read_attribute('user_name');
    }

    public function getPassword(): string {
        return $this->read_attribute('password') ?: "";
    }

    /**
     * Returns the roles or permissions granted to the user for security.
     */
    public function getRoles(): array {
        $this->roleList = array_unique(explode(",", $this->roles));

        // guarantees that a user always has at least one role for security
        if (!$this->roleList) {
            $this->roleList = ['ROLE_USER'];
        }

        return $this->roleList;
    }

    public function setRoles(array $roles) {
        $this->roles = $roles;
        $rolesStr    = join(",", $roles);
        $this->assign_attribute("roles", $rolesStr);
    }

    /**
     * Returns the salt that was originally used to encode the password.
     *
     * {@inheritdoc}
     */
    public function getSalt(): ?string {
        return null;
    }

    /**
     * Removes sensitive data from the user.
     *
     * {@inheritdoc}
     */
    public function eraseCredentials(): void {
        // if you had a plainPassword property, you'd nullify it here
        // $this->plainPassword = null;
    }

    /**
     * {@inheritdoc}
     */
    public function serialize(): string {
        // add $this->salt too if you don't use Bcrypt or Argon2i
        return serialize([$this->id, $this->getUsername(), $this->password]);
    }

    /**
     * {@inheritdoc}
     */
    public function unserialize($serialized): void {
        // add $this->salt too if you don't use Bcrypt or Argon2i
        [$id, $user_name, $password] = unserialize($serialized, ['allowed_classes' => false]);
        $this->assign_attribute('id', $id);
        $this->assign_attribute('user_name', $user_name);
        $this->assign_attribute('password', $password);
    }

    public function __toString() {
        return sprintf("[%s(%s)]", $this->user_name, $this->id);
    }

    public function isDeleted() {
        return $this->is_deleted;
    }

    public function isLocked() {
        return $this->status === self::STATUS_SUSPENDED;
    }

    public function isBanned() {
        return $this->status === self::STATUS_BANNED;
    }

    public static function inspect_user_info($user_id, $user_type_int) {
        $identity_info = UserIdentity::first(['user_id' => $user_id, 'entity_type' => $user_type_int],['select' => 'status_info,biz_legal_representative_name,biz_legal_representative_id_no','hydrate' => false]);
        if (!$identity_info || in_array($identity_info['status_info'], [3, 0]) || !$identity_info['biz_legal_representative_name'] || !$identity_info['biz_legal_representative_id_no']) {
            return 0;//未填写//3未通过
        }
        if ($identity_info['status_info'] == 2) {
            return 2;//等待审核
        } elseif ($identity_info['status_info'] == 1) {
            return 1;  //已通过
        }
        return 0;
    }


    /**
     * @param $userNames
     * @throws \InvalidArgumentException
     */
    public static function getIdsByUserName($userNames, $throwExceptionOnInvalidUserName = true) {
        $userIds   = [];
        $users     = User::all(['user_name' => $userNames]);
        $userNames = array_flip($userNames);
        foreach ($users as $user) {
            $userIds[] = $user['id'];
            if (isset($userNames[$user['user_name']])) {
                unset($userNames[$user['user_name']]);
            }
        }

        if ($userNames) {
            $invalidUserNames = join("<br/>\n", array_keys($userNames));
            if($throwExceptionOnInvalidUserName) {
                throw new \InvalidArgumentException("以下用户不存在，请检查后重新提交：<br/>\n{$invalidUserNames}");
            }
        }

        return $userIds;
    }

    public function isAdmin() {
        return in_array(self::ROLE_ADMIN, $this->getRoles());
    }
}