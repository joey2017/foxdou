<?php
namespace App\Common\Command;

use SimpleRecord\Column;
use SimpleRecord\Connection\Connection;
use SimpleRecord\Connection\ConnectionManager;
use Symfony\Bundle\FrameworkBundle\Command\ContainerAwareCommand;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Style\SymfonyStyle;

class GenerateSettingClasses extends ContainerAwareCommand {

    protected static $defaultName = 'generate:settings';

    /** @var SymfonyStyle */
    private $io;
    private $outputPath;
    private $modelMamespace;
    private $modelExtends;

    /**
     * {@inheritdoc}
     */
    protected function configure() {
        $pos              = strrpos(__NAMESPACE__, '\\');
        $defaultNamespace = substr(__NAMESPACE__, 0, $pos) . '\AutoGenerated';

        $appPos = strpos($defaultNamespace, 'App\\');
        $defaultDir = "{project_dir}/src/" . substr($defaultNamespace, $appPos + strlen('App\\'));
        $defaultDir = strtr($defaultDir, "\\", "/");
        $defaultFile = "{project_dir}/config/system_settings.yaml";

        $this
            ->setDescription('生成数据库表对应的 Model，用户的 Model 可以继承自这个 Model，不用担心自己的 Model 被覆盖')
            ->addOption('settings-file',  'f', InputOption::VALUE_OPTIONAL, "配置文件路径", $defaultFile)
            ->addOption('output-dir',  'o', InputOption::VALUE_OPTIONAL, "保存路径，默认是本命令所在的目录的父目录下的 AutoGenerated 目录", $defaultDir)
            ->addOption('namespace',   'N', InputOption::VALUE_OPTIONAL, "Namespace，默认是本命令所在命名空间的父命名空间下的 AutoGenerated 命名空间", $defaultNamespace)
            ->addOption('dry-run',     'd', InputOption::VALUE_NONE, '只打印出生成的源码，不写入文件')
            ->addOption('debug',     'D', InputOption::VALUE_NONE, '生成额外的 debug 代码')
            ->setHelp(<<<HELP
命令 <info>%command.name%</info> 根据 config/system_settings.yml 文件生成一个设置类，方便引用

语法：
  
    bin/console generate:settings [options]


默认保存路径：{$defaultDir}
默认命名空间：{$defaultNamespace}

NOTE: 为了方便使用，避免不必要的转义错误，在指定命名空间的时候，您可以使用 / 来代替 \，比如 --extends /App/Model/BaseModel 

使用样例：

  bin/console model:generate \
    --output-dir=src/Common/AutoGenerated \
    --namespace=App/Common/AutoGenerated


你也可以使用短参数：
  
  bin/console model:generate \
    -o src/Common/AutoGenerated \
    -N App/Common/AutoGenerated \
    -p=wtf

HELP
            );
    }

    protected function initialize(InputInterface $input, OutputInterface $output) {
        // See https://symfony.com/doc/current/console/style.html
        $this->io = new SymfonyStyle($input, $output);
    }

    protected function execute(InputInterface $input, OutputInterface $output) {
        $settingsFile  = $input->getOption('settings-file');
        $outputDir     = $input->getOption('output-dir');
        $namespace     = strtr($input->getOption('namespace'), "/", "\\");
        $dryRun        = $input->getOption('dry-run');
        $debug         = $input->getOption('debug');

        $container    = $this->getContainer();
        $projectDir   = $container->get('kernel')->getProjectDir();
        $outputDir    = str_replace('{project_dir}', $projectDir, $outputDir);
        $settingsFile = str_replace('{project_dir}', $projectDir, $settingsFile);

        $info = <<<EOF
settingFile:     {$settingsFile}
outputDir:     {$outputDir}
namespace:     {$namespace}

EOF;

        $this->io->section('实际参数值');
        $this->io->note($info);


        if(!file_exists($settingsFile)) {
            $this->io->error("文件不存在: {$settingsFile}");
            return;
        }

        $this->io->writeln("Generating ...");

        $systemSettings = yaml_parse_file($settingsFile);
        if(!$systemSettings) {
            $this->io->error("解析文件错误: {$settingsFile}");
            return;
        }

        $classSources = [$this->getBaseClass()];
        foreach ($systemSettings as $section => $config) {
            $sectionClassSource = $this->generateSection($section, $config, $namespace);
            $classSources[] = $sectionClassSource;
        }

        $settingClass   = "SystemSettingTrait";
        $classSources[] = $this->generateSettingClass($systemSettings, $namespace, $settingClass, $debug);

        $allSources = join("\n", $classSources);
        $allSources = "<?php\nnamespace $namespace;\n\n{$allSources}\n";


        if($dryRun) {
            $this->io->section("Generated Model Source");
            $this->io->writeln($allSources);
        } else {
            $outputDir = str_replace('{project_dir}', $projectDir, $outputDir);
            if(!file_exists($outputDir)) {
                mkdir($outputDir, 0755, true);
            }
            file_put_contents("{$outputDir}/{$settingClass}.php", $allSources);
        }

        $modelFqcn = "{$namespace}\\{$settingClass}";

        if($modelFqcn) {
            $msg = "<info>[SUCCEED]</info> ({$modelFqcn})";
        } else {
            $msg = "<error>[FAILED]</error>";
        }

        $this->io->writeln($msg);

    }

    private function generateSection($sectionKey, $sectionConfig, $namespace) {

        $settings = [];
        $settingNames = [];
        $members =  "    const SECTION_KEY = '{$sectionKey}';\n";
        // $members .= "    const SECTION_NAME = '{$sectionConfig['section_name']}';\n\n";
        $annotations = "/**\n";
        foreach ($sectionConfig as $key => $item) {
            $defaultValue  = $item['default'] ?? '';
            $type  = $item['type'] ?? 'string';
            $annotations .= "  * @property {$type} \${$key}\n";
            $settings[$key] = $defaultValue;
            $settingNames[$key] = $item['label'] ?? $key;
        }
        $annotations .= " */";

        $exportedSettings = var_export($settings, true);
        $members .= "    protected \$attributes = {$exportedSettings};\n";

        // $exportedNames    = var_export($settingNames, true);
        // $members .= "    protected \$settingNames = {$exportedNames};\n";

        $tableTpl = $this->getSectionClassTemplate();
        $search  = ['{namespace}', '{annotations}', '{class}', '{members}'];
        $replace = [$namespace, $annotations, "SystemSettingSection_{$sectionKey}", $members];
        $classSource = str_replace($search, $replace, $tableTpl);

        return $classSource;
    }

    private function getBaseClass() {
        return <<<TPL
class SystemSettingSection {
    protected \$attributes      = [];
    protected \$dirtyAttributes = [];

    public function __isset (\$key) {
        return isset(\$this->attributes[\$key]);
    }

    public function __get(\$key) {
        if(!isset(\$this->attributes[\$key])) {
            throw new \InvalidArgumentException("无此设置项：" . static::SECTION_KEY . ".\${key}");
        }

        return \$this->attributes[\$key];
    }

    public function __set(\$key, \$value) {
        if(!isset(\$this->attributes[\$key])) {
            throw new \InvalidArgumentException("无此设置项：" . static::SECTION_KEY . ".\${key}");
        }

        if(\$this->attributes[\$key] !== \$value) {
            \$this->attributes[\$key] = \$value;
            \$this->dirtyAttributes[\$key] = \$value;
        }
    }
    
    public function getDirtyAttributes() {
        return \$this->dirtyAttributes;
    }
    
    public function all() {
        return \$this->attributes;
    }
}

TPL;

    }

    private function getSectionClassTemplate() {
        return <<<TPL
{annotations}
class {class} extends SystemSettingSection {
{members}
}

TPL;

    }

    private function getSettingClassTemplate($debug = false) {
        $tpl = <<<TPL
{annotations}
Trait {class} {
    protected \$initialized = false;
    protected \$sections = [];
    
{members}

    public function initialize() {
        \$this->initializeInternal();
    }

    public function __isset (\$key) {
        if(!\$this->initialized) {
            \$this->initialize();
        }
        return isset(\$this->sections[\$key]);
    }

    public function __get(\$key) {
        if(!\$this->initialized) {
            \$this->initialize();
        }

        if(!isset(\$this->sections[\$key])) {
            throw new \InvalidArgumentException("无此设置项：{\$key}");
        }

        return \$this->sections[\$key];
    }

    public function __set(\$key, \$value) {
        throw new \InvalidArgumentException("只读属性，不支持写入");
    }

    public function isChanged() {
        /** @var SystemSettingSection \$section */
        foreach (\$this->sections as \$sectionKey => \$section) {
            if(\$section->getDirtyAttributes()) {
                return true;
            }
        }
        
        return false;
    }
    
    public function getChanges() {
        \$dirtyAttributes = [];
        /** @var SystemSettingSection \$section */
        foreach (\$this->sections as \$sectionKey => \$section) {
            \$attributes = \$section->getDirtyAttributes();
            if(\$attributes) {
                \$dirtyAttributes[\$sectionKey] = \$attributes;
            }
        }

        return \$dirtyAttributes;
    }
    
    public function all() {
        \$allSettings = [];
        /** @var SystemSettingSection \$section */
        foreach (\$this->sections as \$sectionKey => \$section) {
            \$allSettings[\$sectionKey] = \$section->all();
        }

        return \$allSettings;
    }

    public function load() {
        throw new \RuntimeException("You need to implement this method in you sub class");
    }

    public function save(\$saveAll = false) {
        throw new \RuntimeException("You need to implement this method in you sub class");
    }

    function jsonSerialize() {
        return \$this->all();
    }

    public function serialize() {
        return json_encode(\$this->all());
    }
    
    public function unserialize(\$serialized) {
        \$data = json_decode(\$serialized, true);
        \$this->loadFromArray(\$data);
    }

    public function loadFromArray(array \$data) {
        if(!\$this->initialized) {
            \$this->initialize();
        }
        foreach (\$data as \$sectionKey => \$keyValues) {
            \$section = \$this->sections[\$sectionKey];
            foreach (\$keyValues as \$key => \$value) {
                \$section->\$key = \$value;
            }
            \$this->sections[\$sectionKey] = \$section;
        }
    }
}

TPL;

        if($debug) {
            $tpl .= <<<DBG

class SystemSetting implements \Serializable {
   use SystemSettingTrait;
}

\$s=new SystemSetting();
\$s->business_registration_settings->activation_method = 2;
\$a=serialize(\$s);
\$gzlen = strlen(gzcompress(\$a));
echo strlen(\$a) . "\\n";
echo \$gzlen . "\\n";
echo \$a.PHP_EOL;

\$ss=unserialize(\$a);
echo "zz: " . \$ss->business_registration_settings->activation_method . PHP_EOL;

fds

DBG;
        }

        return $tpl;
    }

    private function generateSettingClass($system_settings, $namespace, $class, $debug) {
        $memberInit = <<<EOF
        if(\$this->initialized) {
            return;
        }


EOF;
        $members = "";
        $annotations = "/**\n";
        foreach ($system_settings as $sectionKey => $item) {
            // $members .= "    /** @var \\{$namespace}\\{$sectionClass} \${$sectionKey} */\n";
            // $members .= "    protected \${$sectionKey};\n";

            $sectionClass = "SystemSettingSection_{$sectionKey}";
            $annotations  .= "  * @property \\{$namespace}\\{$sectionClass} \${$sectionKey}\n";
            $memberInit   .= "        \$this->sections['{$sectionKey}'] = new {$sectionClass}();\n";
        }

        $memberInit  .= "\n        \$this->initialized = true;";
        $members     .= "\n    protected function initializeInternal() {\n{$memberInit}\n    }\n";
        $annotations .= " */";

        $tableTpl = $this->getSettingClassTemplate($debug);
        $search  = ['{namespace}', '{annotations}', '{class}', '{members}'];
        $replace = [$namespace,    $annotations,    $class, $members];
        $classSource = str_replace($search, $replace, $tableTpl);

        return $classSource;

    }
}
