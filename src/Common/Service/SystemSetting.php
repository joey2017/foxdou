<?php
namespace App\Common\Service;

use App\Common\AutoGenerated\SystemSettingTrait;
use App\Common\Model\SystemSettingItem;
use App\Common\Service\Cache\ChainCache;
use Psr\Cache\InvalidArgumentException;
use Psr\Log\LoggerInterface;

class SystemSetting implements \Serializable {
    use SystemSettingTrait;

    /** @var self */
    static $instance = null;
    /**
     * @var LoggerInterface
     */

    private $logger;
    /**
     * @var ChainCache
     */
    private $cache;

    public function __construct(LoggerInterface $logger, ChainCache $cache) {
        $this->logger = $logger;
        $this->cache = $cache;
    }

    public function initialize() {
        $this->initializeInternal();
        $this->load();
    }

    public function load() {
        try {
            $settings = $this->cache->get('system.settings', function ($itema) {
                $savedSettings = [];
                $all = SystemSettingItem::all();
                foreach ($all as $item) {
                    $section = $item['section'];
                    $name    = $item['name'];
                    $value   = $item['value'];

                    $savedSettings[$section][$name] = $value;
                }

                return $savedSettings;
            });

            $this->loadFromArray($settings);
        } catch (\Exception | InvalidArgumentException $e) {
            $this->logger->error("加载系统设置失败", ['error' => $e->getMessage(), 'stack' => $e->getTraceAsString()]);
        }
    }

    public function save($saveAll = false) {
        if(!$saveAll && !$this->isChanged()) {
            return true;
        }

        try {
            $all = $this->all();
            
            $item = $this->cache->getItem('system.settings');
            $item->set($all);
            $this->cache->save($item);

            $settings          = $saveAll ? $all : $this->getChanges();
            $SystemSettingItem = SystemSettingItem::table_name();
            foreach ($settings as $section => $sectionSettings) {
                foreach ($sectionSettings as $key => $value) {
                    $sql = "INSERT INTO `{$SystemSettingItem}` (section, name, value)  VALUES (?, ?, ?) ON DUPLICATE KEY UPDATE value=?";
                    SystemSettingItem::query($sql, [$section, $key, $value, $value]);
                }

            }

            return true;
        } catch (\Exception | InvalidArgumentException $e) {
            $this->logger->error("保存系统设置失败", ['error' => $e->getMessage(), 'stack' => $e->getTraceAsString()]);
            return false;
        }
    }

    public function __isset ($key) {
        if(!$this->initialized) {
            $this->initialize();
        }
        return isset($this->sections[$key]);
    }

    // public function offsetExists($offset) {
    //     return isset($this->sections[$offset]);
    // }
    //
    // public function offsetGet($offset) {
    //     return $this->sections[$offset];
    // }
    //
    // public function offsetSet($offset, $value) {
    //     $this->sections[$offset] = $value;
    // }
    //
    // public function offsetUnset($offset) {
    //     throw new \RuntimeException('unset is unsupported');
    // }
}
